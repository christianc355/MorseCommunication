
/Users/christian/Documents/LiquidPrep/LightCommunication/target/2.0.1/photon/LightCommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001064  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1080  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a1084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004f4  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a10ec  080a10ec  000210ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1114  080a1114  00021114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eef4f  00000000  00000000  00021118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011a3c  00000000  00000000  00110067  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001687f  00000000  00000000  00121aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c40  00000000  00000000  00138322  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004840  00000000  00000000  00139f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024b4f  00000000  00000000  0013e7a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000270e1  00000000  00000000  001632f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b14aa  00000000  00000000  0018a3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004558  00000000  00000000  0023b87c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ff2f 	bl	80a0e90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ff37 	bl	80a0eac <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1084 	.word	0x080a1084
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	2000055c 	.word	0x2000055c
 80a0058:	2000055c 	.word	0x2000055c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fdfd 	bl	80a0c5c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1050 	.word	0x080a1050
 80a0080:	080a1074 	.word	0x080a1074

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b813 	b.w	80a00ae <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f811 	bl	80a00b0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bda5 	b.w	80a0be0 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 b9f5 	b.w	80a0484 <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 b9fb 	b.w	80a0494 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <setup>:
int soilPin = A0;

void setup() {
  // Put initialization like pinMode and begin functions here.

}
 80a00ae:	4770      	bx	lr

080a00b0 <loop>:
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_GLOBAL__sub_I_pixel>:
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a00b4:	2302      	movs	r3, #2


void loop() {
  // The core of your code will likely live here.

 80a00b6:	b510      	push	{r4, lr}
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a00b8:	4c06      	ldr	r4, [pc, #24]	; (80a00d4 <_GLOBAL__sub_I_pixel+0x20>)
 80a00ba:	461a      	mov	r2, r3
 80a00bc:	210c      	movs	r1, #12
 80a00be:	4620      	mov	r0, r4
 80a00c0:	f000 f850 	bl	80a0164 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a00ca:	4a03      	ldr	r2, [pc, #12]	; (80a00d8 <_GLOBAL__sub_I_pixel+0x24>)
 80a00cc:	4903      	ldr	r1, [pc, #12]	; (80a00dc <_GLOBAL__sub_I_pixel+0x28>)
 80a00ce:	f000 bec7 	b.w	80a0e60 <__aeabi_atexit>
 80a00d2:	bf00      	nop
 80a00d4:	2000006c 	.word	0x2000006c
 80a00d8:	20000068 	.word	0x20000068
 80a00dc:	080a00e1 	.word	0x080a00e1

080a00e0 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a00e0:	b510      	push	{r4, lr}
 80a00e2:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a00e4:	68c0      	ldr	r0, [r0, #12]
 80a00e6:	b108      	cbz	r0, 80a00ec <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a00e8:	f000 f9d4 	bl	80a0494 <free>
  if (begun) pinMode(pin, INPUT);
 80a00ec:	7823      	ldrb	r3, [r4, #0]
 80a00ee:	b11b      	cbz	r3, 80a00f8 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a00f0:	2100      	movs	r1, #0
 80a00f2:	79e0      	ldrb	r0, [r4, #7]
 80a00f4:	f000 fe32 	bl	80a0d5c <pinMode>
}
 80a00f8:	4620      	mov	r0, r4
 80a00fa:	bd10      	pop	{r4, pc}

080a00fc <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a00fc:	b538      	push	{r3, r4, r5, lr}
 80a00fe:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0100:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0102:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0104:	b108      	cbz	r0, 80a010a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0106:	f000 f9c5 	bl	80a0494 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a010a:	79a3      	ldrb	r3, [r4, #6]
 80a010c:	2b06      	cmp	r3, #6
 80a010e:	bf0c      	ite	eq
 80a0110:	2004      	moveq	r0, #4
 80a0112:	2003      	movne	r0, #3
 80a0114:	4368      	muls	r0, r5
 80a0116:	b280      	uxth	r0, r0
 80a0118:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a011a:	f000 f9b3 	bl	80a0484 <malloc>
 80a011e:	60e0      	str	r0, [r4, #12]
 80a0120:	b128      	cbz	r0, 80a012e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0122:	2100      	movs	r1, #0
 80a0124:	88a2      	ldrh	r2, [r4, #4]
 80a0126:	f000 fec1 	bl	80a0eac <memset>
    numLEDs = n;
 80a012a:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a012c:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a012e:	80a0      	strh	r0, [r4, #4]
 80a0130:	8060      	strh	r0, [r4, #2]
}
 80a0132:	e7fb      	b.n	80a012c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a0134 <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0134:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0136:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0138:	4605      	mov	r5, r0
 80a013a:	460c      	mov	r4, r1
    if (begun) {
 80a013c:	b11b      	cbz	r3, 80a0146 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a013e:	2100      	movs	r1, #0
 80a0140:	79c0      	ldrb	r0, [r0, #7]
 80a0142:	f000 fe0b 	bl	80a0d5c <pinMode>
    }
    pin = p;
    if (begun) {
 80a0146:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a0148:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a014a:	b153      	cbz	r3, 80a0162 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a014c:	b2a4      	uxth	r4, r4
 80a014e:	4620      	mov	r0, r4
 80a0150:	2101      	movs	r1, #1
 80a0152:	f000 fe03 	bl	80a0d5c <pinMode>
        digitalWrite(p, LOW);
 80a0156:	4620      	mov	r0, r4
    }
}
 80a0158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a015c:	2100      	movs	r1, #0
 80a015e:	f000 be0e 	b.w	80a0d7e <digitalWrite>
}
 80a0162:	bd38      	pop	{r3, r4, r5, pc}

080a0164 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0164:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0166:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0168:	4604      	mov	r4, r0
 80a016a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a016c:	7183      	strb	r3, [r0, #6]
 80a016e:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a0172:	7005      	strb	r5, [r0, #0]
 80a0174:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a0176:	f7ff ffc1 	bl	80a00fc <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a017a:	4620      	mov	r0, r4
 80a017c:	4631      	mov	r1, r6
 80a017e:	f7ff ffd9 	bl	80a0134 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0182:	4620      	mov	r0, r4
 80a0184:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0188 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a0188:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a018a:	f000 f825 	bl	80a01d8 <HAL_Pin_Map>
 80a018e:	4b01      	ldr	r3, [pc, #4]	; (80a0194 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a0190:	6018      	str	r0, [r3, #0]
}
 80a0192:	bd08      	pop	{r3, pc}
 80a0194:	20000080 	.word	0x20000080

080a0198 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0198:	b508      	push	{r3, lr}
 80a019a:	4b02      	ldr	r3, [pc, #8]	; (80a01a4 <os_mutex_recursive_create+0xc>)
 80a019c:	681b      	ldr	r3, [r3, #0]
 80a019e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a01a0:	9301      	str	r3, [sp, #4]
 80a01a2:	bd08      	pop	{r3, pc}
 80a01a4:	080601d0 	.word	0x080601d0

080a01a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a01a8:	b508      	push	{r3, lr}
 80a01aa:	4b02      	ldr	r3, [pc, #8]	; (80a01b4 <os_mutex_recursive_destroy+0xc>)
 80a01ac:	681b      	ldr	r3, [r3, #0]
 80a01ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a01b0:	9301      	str	r3, [sp, #4]
 80a01b2:	bd08      	pop	{r3, pc}
 80a01b4:	080601d0 	.word	0x080601d0

080a01b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a01b8:	b508      	push	{r3, lr}
 80a01ba:	4b02      	ldr	r3, [pc, #8]	; (80a01c4 <HAL_RNG_GetRandomNumber+0xc>)
 80a01bc:	681b      	ldr	r3, [r3, #0]
 80a01be:	685b      	ldr	r3, [r3, #4]
 80a01c0:	9301      	str	r3, [sp, #4]
 80a01c2:	bd08      	pop	{r3, pc}
 80a01c4:	0806019c 	.word	0x0806019c

080a01c8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a01c8:	b508      	push	{r3, lr}
 80a01ca:	4b02      	ldr	r3, [pc, #8]	; (80a01d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a01cc:	681b      	ldr	r3, [r3, #0]
 80a01ce:	695b      	ldr	r3, [r3, #20]
 80a01d0:	9301      	str	r3, [sp, #4]
 80a01d2:	bd08      	pop	{r3, pc}
 80a01d4:	0806019c 	.word	0x0806019c

080a01d8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a01d8:	b508      	push	{r3, lr}
 80a01da:	4b02      	ldr	r3, [pc, #8]	; (80a01e4 <HAL_Pin_Map+0xc>)
 80a01dc:	681b      	ldr	r3, [r3, #0]
 80a01de:	681b      	ldr	r3, [r3, #0]
 80a01e0:	9301      	str	r3, [sp, #4]
 80a01e2:	bd08      	pop	{r3, pc}
 80a01e4:	080601b0 	.word	0x080601b0

080a01e8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a01e8:	b508      	push	{r3, lr}
 80a01ea:	4b02      	ldr	r3, [pc, #8]	; (80a01f4 <HAL_Pin_Mode+0xc>)
 80a01ec:	681b      	ldr	r3, [r3, #0]
 80a01ee:	689b      	ldr	r3, [r3, #8]
 80a01f0:	9301      	str	r3, [sp, #4]
 80a01f2:	bd08      	pop	{r3, pc}
 80a01f4:	080601b0 	.word	0x080601b0

080a01f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a01f8:	b508      	push	{r3, lr}
 80a01fa:	4b02      	ldr	r3, [pc, #8]	; (80a0204 <HAL_Get_Pin_Mode+0xc>)
 80a01fc:	681b      	ldr	r3, [r3, #0]
 80a01fe:	68db      	ldr	r3, [r3, #12]
 80a0200:	9301      	str	r3, [sp, #4]
 80a0202:	bd08      	pop	{r3, pc}
 80a0204:	080601b0 	.word	0x080601b0

080a0208 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0208:	b508      	push	{r3, lr}
 80a020a:	4b02      	ldr	r3, [pc, #8]	; (80a0214 <HAL_GPIO_Write+0xc>)
 80a020c:	681b      	ldr	r3, [r3, #0]
 80a020e:	691b      	ldr	r3, [r3, #16]
 80a0210:	9301      	str	r3, [sp, #4]
 80a0212:	bd08      	pop	{r3, pc}
 80a0214:	080601b0 	.word	0x080601b0

080a0218 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0218:	b508      	push	{r3, lr}
 80a021a:	4b02      	ldr	r3, [pc, #8]	; (80a0224 <hal_i2c_write+0xc>)
 80a021c:	681b      	ldr	r3, [r3, #0]
 80a021e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0220:	9301      	str	r3, [sp, #4]
 80a0222:	bd08      	pop	{r3, pc}
 80a0224:	080601ac 	.word	0x080601ac

080a0228 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0228:	b508      	push	{r3, lr}
 80a022a:	4b02      	ldr	r3, [pc, #8]	; (80a0234 <hal_i2c_available+0xc>)
 80a022c:	681b      	ldr	r3, [r3, #0]
 80a022e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0230:	9301      	str	r3, [sp, #4]
 80a0232:	bd08      	pop	{r3, pc}
 80a0234:	080601ac 	.word	0x080601ac

080a0238 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0238:	b508      	push	{r3, lr}
 80a023a:	4b02      	ldr	r3, [pc, #8]	; (80a0244 <hal_i2c_read+0xc>)
 80a023c:	681b      	ldr	r3, [r3, #0]
 80a023e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0240:	9301      	str	r3, [sp, #4]
 80a0242:	bd08      	pop	{r3, pc}
 80a0244:	080601ac 	.word	0x080601ac

080a0248 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0248:	b508      	push	{r3, lr}
 80a024a:	4b02      	ldr	r3, [pc, #8]	; (80a0254 <hal_i2c_peek+0xc>)
 80a024c:	681b      	ldr	r3, [r3, #0]
 80a024e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0250:	9301      	str	r3, [sp, #4]
 80a0252:	bd08      	pop	{r3, pc}
 80a0254:	080601ac 	.word	0x080601ac

080a0258 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0258:	b508      	push	{r3, lr}
 80a025a:	4b02      	ldr	r3, [pc, #8]	; (80a0264 <hal_i2c_flush+0xc>)
 80a025c:	681b      	ldr	r3, [r3, #0]
 80a025e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	bd08      	pop	{r3, pc}
 80a0264:	080601ac 	.word	0x080601ac

080a0268 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0268:	b508      	push	{r3, lr}
 80a026a:	4b02      	ldr	r3, [pc, #8]	; (80a0274 <hal_i2c_is_enabled+0xc>)
 80a026c:	681b      	ldr	r3, [r3, #0]
 80a026e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0270:	9301      	str	r3, [sp, #4]
 80a0272:	bd08      	pop	{r3, pc}
 80a0274:	080601ac 	.word	0x080601ac

080a0278 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0278:	b508      	push	{r3, lr}
 80a027a:	4b03      	ldr	r3, [pc, #12]	; (80a0288 <hal_i2c_init+0x10>)
 80a027c:	681b      	ldr	r3, [r3, #0]
 80a027e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0282:	9301      	str	r3, [sp, #4]
 80a0284:	bd08      	pop	{r3, pc}
 80a0286:	0000      	.short	0x0000
 80a0288:	080601ac 	.word	0x080601ac

080a028c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a028c:	b508      	push	{r3, lr}
 80a028e:	4b02      	ldr	r3, [pc, #8]	; (80a0298 <hal_spi_init+0xc>)
 80a0290:	681b      	ldr	r3, [r3, #0]
 80a0292:	69db      	ldr	r3, [r3, #28]
 80a0294:	9301      	str	r3, [sp, #4]
 80a0296:	bd08      	pop	{r3, pc}
 80a0298:	080601b4 	.word	0x080601b4

080a029c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a029c:	b508      	push	{r3, lr}
 80a029e:	4b02      	ldr	r3, [pc, #8]	; (80a02a8 <hal_spi_is_enabled+0xc>)
 80a02a0:	681b      	ldr	r3, [r3, #0]
 80a02a2:	6a1b      	ldr	r3, [r3, #32]
 80a02a4:	9301      	str	r3, [sp, #4]
 80a02a6:	bd08      	pop	{r3, pc}
 80a02a8:	080601b4 	.word	0x080601b4

080a02ac <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a02ac:	b508      	push	{r3, lr}
 80a02ae:	4b02      	ldr	r3, [pc, #8]	; (80a02b8 <hal_usart_init+0xc>)
 80a02b0:	681b      	ldr	r3, [r3, #0]
 80a02b2:	699b      	ldr	r3, [r3, #24]
 80a02b4:	9301      	str	r3, [sp, #4]
 80a02b6:	bd08      	pop	{r3, pc}
 80a02b8:	080601c4 	.word	0x080601c4

080a02bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a02bc:	b508      	push	{r3, lr}
 80a02be:	4b02      	ldr	r3, [pc, #8]	; (80a02c8 <hal_usart_write+0xc>)
 80a02c0:	681b      	ldr	r3, [r3, #0]
 80a02c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a02c4:	9301      	str	r3, [sp, #4]
 80a02c6:	bd08      	pop	{r3, pc}
 80a02c8:	080601c4 	.word	0x080601c4

080a02cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a02cc:	b508      	push	{r3, lr}
 80a02ce:	4b02      	ldr	r3, [pc, #8]	; (80a02d8 <hal_usart_available+0xc>)
 80a02d0:	681b      	ldr	r3, [r3, #0]
 80a02d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a02d4:	9301      	str	r3, [sp, #4]
 80a02d6:	bd08      	pop	{r3, pc}
 80a02d8:	080601c4 	.word	0x080601c4

080a02dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a02dc:	b508      	push	{r3, lr}
 80a02de:	4b02      	ldr	r3, [pc, #8]	; (80a02e8 <hal_usart_read+0xc>)
 80a02e0:	681b      	ldr	r3, [r3, #0]
 80a02e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a02e4:	9301      	str	r3, [sp, #4]
 80a02e6:	bd08      	pop	{r3, pc}
 80a02e8:	080601c4 	.word	0x080601c4

080a02ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a02ec:	b508      	push	{r3, lr}
 80a02ee:	4b02      	ldr	r3, [pc, #8]	; (80a02f8 <hal_usart_peek+0xc>)
 80a02f0:	681b      	ldr	r3, [r3, #0]
 80a02f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a02f4:	9301      	str	r3, [sp, #4]
 80a02f6:	bd08      	pop	{r3, pc}
 80a02f8:	080601c4 	.word	0x080601c4

080a02fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a02fc:	b508      	push	{r3, lr}
 80a02fe:	4b02      	ldr	r3, [pc, #8]	; (80a0308 <hal_usart_flush+0xc>)
 80a0300:	681b      	ldr	r3, [r3, #0]
 80a0302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0304:	9301      	str	r3, [sp, #4]
 80a0306:	bd08      	pop	{r3, pc}
 80a0308:	080601c4 	.word	0x080601c4

080a030c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a030c:	b508      	push	{r3, lr}
 80a030e:	4b02      	ldr	r3, [pc, #8]	; (80a0318 <hal_usart_is_enabled+0xc>)
 80a0310:	681b      	ldr	r3, [r3, #0]
 80a0312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0314:	9301      	str	r3, [sp, #4]
 80a0316:	bd08      	pop	{r3, pc}
 80a0318:	080601c4 	.word	0x080601c4

080a031c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a031c:	b508      	push	{r3, lr}
 80a031e:	4b02      	ldr	r3, [pc, #8]	; (80a0328 <hal_usart_available_data_for_write+0xc>)
 80a0320:	681b      	ldr	r3, [r3, #0]
 80a0322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0324:	9301      	str	r3, [sp, #4]
 80a0326:	bd08      	pop	{r3, pc}
 80a0328:	080601c4 	.word	0x080601c4

080a032c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a032c:	b508      	push	{r3, lr}
 80a032e:	4b02      	ldr	r3, [pc, #8]	; (80a0338 <HAL_USB_USART_Init+0xc>)
 80a0330:	681b      	ldr	r3, [r3, #0]
 80a0332:	681b      	ldr	r3, [r3, #0]
 80a0334:	9301      	str	r3, [sp, #4]
 80a0336:	bd08      	pop	{r3, pc}
 80a0338:	080601d8 	.word	0x080601d8

080a033c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a033c:	b508      	push	{r3, lr}
 80a033e:	4b02      	ldr	r3, [pc, #8]	; (80a0348 <HAL_USB_USART_Available_Data+0xc>)
 80a0340:	681b      	ldr	r3, [r3, #0]
 80a0342:	691b      	ldr	r3, [r3, #16]
 80a0344:	9301      	str	r3, [sp, #4]
 80a0346:	bd08      	pop	{r3, pc}
 80a0348:	080601d8 	.word	0x080601d8

080a034c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a034c:	b508      	push	{r3, lr}
 80a034e:	4b02      	ldr	r3, [pc, #8]	; (80a0358 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0350:	681b      	ldr	r3, [r3, #0]
 80a0352:	695b      	ldr	r3, [r3, #20]
 80a0354:	9301      	str	r3, [sp, #4]
 80a0356:	bd08      	pop	{r3, pc}
 80a0358:	080601d8 	.word	0x080601d8

080a035c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b02      	ldr	r3, [pc, #8]	; (80a0368 <HAL_USB_USART_Receive_Data+0xc>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	699b      	ldr	r3, [r3, #24]
 80a0364:	9301      	str	r3, [sp, #4]
 80a0366:	bd08      	pop	{r3, pc}
 80a0368:	080601d8 	.word	0x080601d8

080a036c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a036c:	b508      	push	{r3, lr}
 80a036e:	4b02      	ldr	r3, [pc, #8]	; (80a0378 <HAL_USB_USART_Send_Data+0xc>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	69db      	ldr	r3, [r3, #28]
 80a0374:	9301      	str	r3, [sp, #4]
 80a0376:	bd08      	pop	{r3, pc}
 80a0378:	080601d8 	.word	0x080601d8

080a037c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a037c:	b508      	push	{r3, lr}
 80a037e:	4b02      	ldr	r3, [pc, #8]	; (80a0388 <HAL_USB_USART_Flush_Data+0xc>)
 80a0380:	681b      	ldr	r3, [r3, #0]
 80a0382:	6a1b      	ldr	r3, [r3, #32]
 80a0384:	9301      	str	r3, [sp, #4]
 80a0386:	bd08      	pop	{r3, pc}
 80a0388:	080601d8 	.word	0x080601d8

080a038c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a038c:	b508      	push	{r3, lr}
 80a038e:	4b02      	ldr	r3, [pc, #8]	; (80a0398 <inet_gethostbyname+0xc>)
 80a0390:	681b      	ldr	r3, [r3, #0]
 80a0392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0394:	9301      	str	r3, [sp, #4]
 80a0396:	bd08      	pop	{r3, pc}
 80a0398:	080601c0 	.word	0x080601c0

080a039c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b02      	ldr	r3, [pc, #8]	; (80a03a8 <set_system_mode+0xc>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	685b      	ldr	r3, [r3, #4]
 80a03a4:	9301      	str	r3, [sp, #4]
 80a03a6:	bd08      	pop	{r3, pc}
 80a03a8:	080601a4 	.word	0x080601a4

080a03ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a03ac:	b508      	push	{r3, lr}
 80a03ae:	4b03      	ldr	r3, [pc, #12]	; (80a03bc <system_ctrl_set_app_request_handler+0x10>)
 80a03b0:	681b      	ldr	r3, [r3, #0]
 80a03b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a03b6:	9301      	str	r3, [sp, #4]
 80a03b8:	bd08      	pop	{r3, pc}
 80a03ba:	0000      	.short	0x0000
 80a03bc:	080601a4 	.word	0x080601a4

080a03c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b03      	ldr	r3, [pc, #12]	; (80a03d0 <system_ctrl_set_result+0x10>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a03ca:	9301      	str	r3, [sp, #4]
 80a03cc:	bd08      	pop	{r3, pc}
 80a03ce:	0000      	.short	0x0000
 80a03d0:	080601a4 	.word	0x080601a4

080a03d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601cc 	.word	0x080601cc

080a03e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <network_connect+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	685b      	ldr	r3, [r3, #4]
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601c8 	.word	0x080601c8

080a03f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <network_connecting+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	689b      	ldr	r3, [r3, #8]
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601c8 	.word	0x080601c8

080a0404 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <network_disconnect+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	68db      	ldr	r3, [r3, #12]
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601c8 	.word	0x080601c8

080a0414 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <network_ready+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	691b      	ldr	r3, [r3, #16]
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601c8 	.word	0x080601c8

080a0424 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <network_on+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	695b      	ldr	r3, [r3, #20]
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601c8 	.word	0x080601c8

080a0434 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <network_off+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	699b      	ldr	r3, [r3, #24]
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601c8 	.word	0x080601c8

080a0444 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <network_listen+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	69db      	ldr	r3, [r3, #28]
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601c8 	.word	0x080601c8

080a0454 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <network_listening+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	6a1b      	ldr	r3, [r3, #32]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601c8 	.word	0x080601c8

080a0464 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <network_set_listen_timeout+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601c8 	.word	0x080601c8

080a0474 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <network_get_listen_timeout+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601c8 	.word	0x080601c8

080a0484 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <malloc+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	681b      	ldr	r3, [r3, #0]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601a0 	.word	0x080601a0

080a0494 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <free+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	685b      	ldr	r3, [r3, #4]
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601a0 	.word	0x080601a0

080a04a4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <newlib_impure_ptr_callback+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601a0 	.word	0x080601a0

080a04b4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a04b4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a04b6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a04b8:	4604      	mov	r4, r0
      if (_M_manager)
 80a04ba:	b113      	cbz	r3, 80a04c2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a04bc:	2203      	movs	r2, #3
 80a04be:	4601      	mov	r1, r0
 80a04c0:	4798      	blx	r3
    }
 80a04c2:	4620      	mov	r0, r4
 80a04c4:	bd10      	pop	{r4, pc}

080a04c6 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a04c6:	4770      	bx	lr

080a04c8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a04c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04ca:	4606      	mov	r6, r0
 80a04cc:	4615      	mov	r5, r2
 80a04ce:	460c      	mov	r4, r1
 80a04d0:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a04d2:	42bc      	cmp	r4, r7
 80a04d4:	d006      	beq.n	80a04e4 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a04d6:	6833      	ldr	r3, [r6, #0]
 80a04d8:	4630      	mov	r0, r6
 80a04da:	689b      	ldr	r3, [r3, #8]
 80a04dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a04e0:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a04e2:	e7f6      	b.n	80a04d2 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a04e4:	4628      	mov	r0, r5
 80a04e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a04e8 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a04e8:	2200      	movs	r2, #0
 80a04ea:	7c00      	ldrb	r0, [r0, #16]
 80a04ec:	f7ff be94 	b.w	80a0218 <hal_i2c_write>

080a04f0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a04f0:	2100      	movs	r1, #0
 80a04f2:	7c00      	ldrb	r0, [r0, #16]
 80a04f4:	f7ff be98 	b.w	80a0228 <hal_i2c_available>

080a04f8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a04f8:	2100      	movs	r1, #0
 80a04fa:	7c00      	ldrb	r0, [r0, #16]
 80a04fc:	f7ff be9c 	b.w	80a0238 <hal_i2c_read>

080a0500 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0500:	2100      	movs	r1, #0
 80a0502:	7c00      	ldrb	r0, [r0, #16]
 80a0504:	f7ff bea0 	b.w	80a0248 <hal_i2c_peek>

080a0508 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0508:	2100      	movs	r1, #0
 80a050a:	7c00      	ldrb	r0, [r0, #16]
 80a050c:	f7ff bea4 	b.w	80a0258 <hal_i2c_flush>

080a0510 <_ZN7TwoWireD0Ev>:
 80a0510:	b510      	push	{r4, lr}
 80a0512:	4604      	mov	r4, r0
 80a0514:	2114      	movs	r1, #20
 80a0516:	f000 fca8 	bl	80a0e6a <_ZdlPvj>
 80a051a:	4620      	mov	r0, r4
 80a051c:	bd10      	pop	{r4, pc}
	...

080a0520 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0520:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0526:	4604      	mov	r4, r0
 80a0528:	4608      	mov	r0, r1
 80a052a:	2100      	movs	r1, #0
 80a052c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0530:	4b03      	ldr	r3, [pc, #12]	; (80a0540 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0532:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0534:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0536:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0538:	f7ff fe9e 	bl	80a0278 <hal_i2c_init>
}
 80a053c:	4620      	mov	r0, r4
 80a053e:	bd10      	pop	{r4, pc}
 80a0540:	080a0f30 	.word	0x080a0f30

080a0544 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0544:	4770      	bx	lr

080a0546 <_ZN9IPAddressD0Ev>:
 80a0546:	b510      	push	{r4, lr}
 80a0548:	4604      	mov	r4, r0
 80a054a:	2118      	movs	r1, #24
 80a054c:	f000 fc8d 	bl	80a0e6a <_ZdlPvj>
 80a0550:	4620      	mov	r0, r4
 80a0552:	bd10      	pop	{r4, pc}

080a0554 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0556:	460e      	mov	r6, r1
 80a0558:	2400      	movs	r4, #0
 80a055a:	f100 0708 	add.w	r7, r0, #8
 80a055e:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0560:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0564:	220a      	movs	r2, #10
 80a0566:	4630      	mov	r0, r6
 80a0568:	f000 f8e7 	bl	80a073a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a056c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a056e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0570:	d101      	bne.n	80a0576 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0572:	4620      	mov	r0, r4
 80a0574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0576:	2c00      	cmp	r4, #0
 80a0578:	d0f2      	beq.n	80a0560 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a057a:	212e      	movs	r1, #46	; 0x2e
 80a057c:	4630      	mov	r0, r6
 80a057e:	f000 f8d9 	bl	80a0734 <_ZN5Print5printEc>
 80a0582:	4404      	add	r4, r0
 80a0584:	e7ec      	b.n	80a0560 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0588 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0588:	b510      	push	{r4, lr}
 80a058a:	4604      	mov	r4, r0
 80a058c:	4b04      	ldr	r3, [pc, #16]	; (80a05a0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a058e:	2211      	movs	r2, #17
 80a0590:	2100      	movs	r1, #0
 80a0592:	f840 3b04 	str.w	r3, [r0], #4
 80a0596:	f000 fc89 	bl	80a0eac <memset>
}
 80a059a:	4620      	mov	r0, r4
 80a059c:	bd10      	pop	{r4, pc}
 80a059e:	bf00      	nop
 80a05a0:	080a0f58 	.word	0x080a0f58

080a05a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a05a4:	4603      	mov	r3, r0
 80a05a6:	4a07      	ldr	r2, [pc, #28]	; (80a05c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a05a8:	b510      	push	{r4, lr}
 80a05aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a05ae:	f101 0210 	add.w	r2, r1, #16
 80a05b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a05b6:	4291      	cmp	r1, r2
 80a05b8:	f843 4b04 	str.w	r4, [r3], #4
 80a05bc:	d1f9      	bne.n	80a05b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a05be:	780a      	ldrb	r2, [r1, #0]
 80a05c0:	701a      	strb	r2, [r3, #0]
}
 80a05c2:	bd10      	pop	{r4, pc}
 80a05c4:	080a0f58 	.word	0x080a0f58

080a05c8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a05c8:	4a02      	ldr	r2, [pc, #8]	; (80a05d4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a05ca:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a05ce:	2204      	movs	r2, #4
 80a05d0:	7502      	strb	r2, [r0, #20]
}
 80a05d2:	4770      	bx	lr
 80a05d4:	080a0f58 	.word	0x080a0f58

080a05d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a05d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a05da:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a05de:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a05e2:	2304      	movs	r3, #4
 80a05e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a05e8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a05ec:	6044      	str	r4, [r0, #4]
 80a05ee:	7503      	strb	r3, [r0, #20]
}
 80a05f0:	bd10      	pop	{r4, pc}
	...

080a05f4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a05f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a05f6:	4d04      	ldr	r5, [pc, #16]	; (80a0608 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a05f8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a05fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a05fe:	9500      	str	r5, [sp, #0]
 80a0600:	f7ff ffea 	bl	80a05d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0604:	b003      	add	sp, #12
 80a0606:	bd30      	pop	{r4, r5, pc}
 80a0608:	080a0f58 	.word	0x080a0f58

080a060c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a060c:	4b01      	ldr	r3, [pc, #4]	; (80a0614 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a060e:	4a02      	ldr	r2, [pc, #8]	; (80a0618 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0610:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0612:	4770      	bx	lr
 80a0614:	20000084 	.word	0x20000084
 80a0618:	080a0f64 	.word	0x080a0f64

080a061c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a061c:	2300      	movs	r3, #0
 80a061e:	6840      	ldr	r0, [r0, #4]
 80a0620:	461a      	mov	r2, r3
 80a0622:	f7ff bedf 	b.w	80a03e4 <network_connect>

080a0626 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0626:	2200      	movs	r2, #0
 80a0628:	2102      	movs	r1, #2
 80a062a:	6840      	ldr	r0, [r0, #4]
 80a062c:	f7ff beea 	b.w	80a0404 <network_disconnect>

080a0630 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0630:	2200      	movs	r2, #0
 80a0632:	6840      	ldr	r0, [r0, #4]
 80a0634:	4611      	mov	r1, r2
 80a0636:	f7ff bedd 	b.w	80a03f4 <network_connecting>

080a063a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a063a:	2200      	movs	r2, #0
 80a063c:	6840      	ldr	r0, [r0, #4]
 80a063e:	4611      	mov	r1, r2
 80a0640:	f7ff bee8 	b.w	80a0414 <network_ready>

080a0644 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0644:	2300      	movs	r3, #0
 80a0646:	6840      	ldr	r0, [r0, #4]
 80a0648:	461a      	mov	r2, r3
 80a064a:	4619      	mov	r1, r3
 80a064c:	f7ff beea 	b.w	80a0424 <network_on>

080a0650 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0650:	2300      	movs	r3, #0
 80a0652:	6840      	ldr	r0, [r0, #4]
 80a0654:	461a      	mov	r2, r3
 80a0656:	4619      	mov	r1, r3
 80a0658:	f7ff beec 	b.w	80a0434 <network_off>

080a065c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a065c:	2200      	movs	r2, #0
 80a065e:	6840      	ldr	r0, [r0, #4]
 80a0660:	f081 0101 	eor.w	r1, r1, #1
 80a0664:	f7ff beee 	b.w	80a0444 <network_listen>

080a0668 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0668:	2200      	movs	r2, #0
 80a066a:	6840      	ldr	r0, [r0, #4]
 80a066c:	f7ff befa 	b.w	80a0464 <network_set_listen_timeout>

080a0670 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0670:	2200      	movs	r2, #0
 80a0672:	6840      	ldr	r0, [r0, #4]
 80a0674:	4611      	mov	r1, r2
 80a0676:	f7ff befd 	b.w	80a0474 <network_get_listen_timeout>

080a067a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a067a:	2200      	movs	r2, #0
 80a067c:	6840      	ldr	r0, [r0, #4]
 80a067e:	4611      	mov	r1, r2
 80a0680:	f7ff bee8 	b.w	80a0454 <network_listening>

080a0684 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0684:	b570      	push	{r4, r5, r6, lr}
 80a0686:	4615      	mov	r5, r2
 80a0688:	b08e      	sub	sp, #56	; 0x38
 80a068a:	4604      	mov	r4, r0
    IPAddress addr;
 80a068c:	a808      	add	r0, sp, #32
 80a068e:	f7ff ff7b 	bl	80a0588 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0692:	2211      	movs	r2, #17
 80a0694:	2100      	movs	r1, #0
 80a0696:	a803      	add	r0, sp, #12
 80a0698:	f000 fc08 	bl	80a0eac <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a069c:	2600      	movs	r6, #0
 80a069e:	4628      	mov	r0, r5
 80a06a0:	f000 fc30 	bl	80a0f04 <strlen>
 80a06a4:	4b0a      	ldr	r3, [pc, #40]	; (80a06d0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a06a6:	9600      	str	r6, [sp, #0]
 80a06a8:	b281      	uxth	r1, r0
 80a06aa:	685b      	ldr	r3, [r3, #4]
 80a06ac:	4628      	mov	r0, r5
 80a06ae:	aa03      	add	r2, sp, #12
 80a06b0:	f7ff fe6c 	bl	80a038c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a06b4:	b130      	cbz	r0, 80a06c4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a06b6:	4631      	mov	r1, r6
 80a06b8:	4620      	mov	r0, r4
 80a06ba:	f7ff ff85 	bl	80a05c8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a06be:	4620      	mov	r0, r4
 80a06c0:	b00e      	add	sp, #56	; 0x38
 80a06c2:	bd70      	pop	{r4, r5, r6, pc}
 80a06c4:	4620      	mov	r0, r4
 80a06c6:	a903      	add	r1, sp, #12
 80a06c8:	f7ff ff6c 	bl	80a05a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a06cc:	e7f7      	b.n	80a06be <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a06ce:	bf00      	nop
 80a06d0:	20000508 	.word	0x20000508

080a06d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a06d4:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a06d6:	4a03      	ldr	r2, [pc, #12]	; (80a06e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a06d8:	601a      	str	r2, [r3, #0]
 80a06da:	2200      	movs	r2, #0
 80a06dc:	605a      	str	r2, [r3, #4]

} // spark
 80a06de:	4770      	bx	lr
 80a06e0:	20000088 	.word	0x20000088
 80a06e4:	080a0f70 	.word	0x080a0f70

080a06e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a06e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06ea:	4606      	mov	r6, r0
 80a06ec:	460d      	mov	r5, r1
  size_t n = 0;
 80a06ee:	2400      	movs	r4, #0
 80a06f0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a06f2:	42bd      	cmp	r5, r7
 80a06f4:	d00c      	beq.n	80a0710 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a06f6:	6833      	ldr	r3, [r6, #0]
 80a06f8:	4630      	mov	r0, r6
 80a06fa:	689b      	ldr	r3, [r3, #8]
 80a06fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0700:	4798      	blx	r3
     if (chunk>=0)
 80a0702:	1e03      	subs	r3, r0, #0
 80a0704:	db01      	blt.n	80a070a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0706:	441c      	add	r4, r3
  while (size--) {
 80a0708:	e7f3      	b.n	80a06f2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a070a:	2c00      	cmp	r4, #0
 80a070c:	bf08      	it	eq
 80a070e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0710:	4620      	mov	r0, r4
 80a0712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0714 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a0714:	b570      	push	{r4, r5, r6, lr}
 80a0716:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0718:	460c      	mov	r4, r1
    }
 80a071a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a071c:	b149      	cbz	r1, 80a0732 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a071e:	f000 fbf1 	bl	80a0f04 <strlen>
 80a0722:	682b      	ldr	r3, [r5, #0]
 80a0724:	4602      	mov	r2, r0
 80a0726:	4621      	mov	r1, r4
 80a0728:	4628      	mov	r0, r5
    }
 80a072a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a072e:	68db      	ldr	r3, [r3, #12]
 80a0730:	4718      	bx	r3
    }
 80a0732:	bd70      	pop	{r4, r5, r6, pc}

080a0734 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0734:	6803      	ldr	r3, [r0, #0]
 80a0736:	689b      	ldr	r3, [r3, #8]
 80a0738:	4718      	bx	r3

080a073a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a073a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a073c:	2a01      	cmp	r2, #1
 80a073e:	bf98      	it	ls
 80a0740:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0742:	b530      	push	{r4, r5, lr}
 80a0744:	b08b      	sub	sp, #44	; 0x2c
 80a0746:	460c      	mov	r4, r1
  *str = '\0';
 80a0748:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a074c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a074e:	4625      	mov	r5, r4
 80a0750:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0754:	fb04 5312 	mls	r3, r4, r2, r5
 80a0758:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a075a:	2b09      	cmp	r3, #9
 80a075c:	bf94      	ite	ls
 80a075e:	3330      	addls	r3, #48	; 0x30
 80a0760:	3337      	addhi	r3, #55	; 0x37
 80a0762:	b2db      	uxtb	r3, r3
  } while(n);
 80a0764:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0766:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a076a:	d9f0      	bls.n	80a074e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a076c:	f7ff ffd2 	bl	80a0714 <_ZN5Print5writeEPKc>
}
 80a0770:	b00b      	add	sp, #44	; 0x2c
 80a0772:	bd30      	pop	{r4, r5, pc}

080a0774 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0774:	b510      	push	{r4, lr}
 80a0776:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0778:	f7ff fe9c 	bl	80a04b4 <_ZNSt14_Function_baseD1Ev>
 80a077c:	4620      	mov	r0, r4
 80a077e:	bd10      	pop	{r4, pc}

080a0780 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0780:	2300      	movs	r3, #0
 80a0782:	4803      	ldr	r0, [pc, #12]	; (80a0790 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0784:	4a03      	ldr	r2, [pc, #12]	; (80a0794 <_GLOBAL__sub_I_RGB+0x14>)
 80a0786:	4904      	ldr	r1, [pc, #16]	; (80a0798 <_GLOBAL__sub_I_RGB+0x18>)
 80a0788:	6083      	str	r3, [r0, #8]
 80a078a:	f000 bb69 	b.w	80a0e60 <__aeabi_atexit>
 80a078e:	bf00      	nop
 80a0790:	20000090 	.word	0x20000090
 80a0794:	20000068 	.word	0x20000068
 80a0798:	080a0775 	.word	0x080a0775

080a079c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a079c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a079e:	2600      	movs	r6, #0
 80a07a0:	4604      	mov	r4, r0
 80a07a2:	460d      	mov	r5, r1
 80a07a4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a07a8:	f7ff fcf6 	bl	80a0198 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a07ac:	4628      	mov	r0, r5
    _spi = spi;
 80a07ae:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a07b0:	f7ff fd6c 	bl	80a028c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a07b4:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a07b6:	6066      	str	r6, [r4, #4]
}
 80a07b8:	bd70      	pop	{r4, r5, r6, pc}

080a07ba <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a07ba:	b510      	push	{r4, lr}
 80a07bc:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a07be:	6800      	ldr	r0, [r0, #0]
 80a07c0:	b118      	cbz	r0, 80a07ca <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a07c2:	f7ff fe67 	bl	80a0494 <free>
            wakeupSource_ = nullptr;
 80a07c6:	2300      	movs	r3, #0
 80a07c8:	6023      	str	r3, [r4, #0]
        }
    }
 80a07ca:	bd10      	pop	{r4, pc}

080a07cc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a07cc:	b510      	push	{r4, lr}
 80a07ce:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a07d0:	f7ff fff3 	bl	80a07ba <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	bd10      	pop	{r4, pc}

080a07d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a07d8:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a07da:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a07dc:	b510      	push	{r4, lr}
 80a07de:	4b08      	ldr	r3, [pc, #32]	; (80a0800 <_GLOBAL__sub_I_System+0x28>)
 80a07e0:	4c08      	ldr	r4, [pc, #32]	; (80a0804 <_GLOBAL__sub_I_System+0x2c>)
 80a07e2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a07e4:	4b08      	ldr	r3, [pc, #32]	; (80a0808 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a07e6:	6020      	str	r0, [r4, #0]
 80a07e8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a07ea:	71a0      	strb	r0, [r4, #6]
 80a07ec:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a07ee:	f7ff fdd5 	bl	80a039c <set_system_mode>
SystemClass System;
 80a07f2:	4620      	mov	r0, r4
 80a07f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a07f8:	4a04      	ldr	r2, [pc, #16]	; (80a080c <_GLOBAL__sub_I_System+0x34>)
 80a07fa:	4905      	ldr	r1, [pc, #20]	; (80a0810 <_GLOBAL__sub_I_System+0x38>)
 80a07fc:	f000 bb30 	b.w	80a0e60 <__aeabi_atexit>
 80a0800:	200000ac 	.word	0x200000ac
 80a0804:	200000a0 	.word	0x200000a0
 80a0808:	ffff0000 	.word	0xffff0000
 80a080c:	20000068 	.word	0x20000068
 80a0810:	080a07cd 	.word	0x080a07cd

080a0814 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0814:	4b02      	ldr	r3, [pc, #8]	; (80a0820 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0816:	681a      	ldr	r2, [r3, #0]
 80a0818:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a081a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a081c:	4770      	bx	lr
 80a081e:	bf00      	nop
 80a0820:	20000000 	.word	0x20000000
 80a0824:	200000b0 	.word	0x200000b0

080a0828 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0828:	4770      	bx	lr

080a082a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a082a:	7441      	strb	r1, [r0, #17]
}
 80a082c:	4770      	bx	lr

080a082e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a082e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0830:	7c00      	ldrb	r0, [r0, #16]
 80a0832:	f7ff fd73 	bl	80a031c <hal_usart_available_data_for_write>
}
 80a0836:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a083a:	bd08      	pop	{r3, pc}

080a083c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a083c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a083e:	7c00      	ldrb	r0, [r0, #16]
 80a0840:	f7ff fd44 	bl	80a02cc <hal_usart_available>
}
 80a0844:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0848:	bd08      	pop	{r3, pc}

080a084a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a084a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a084c:	7c00      	ldrb	r0, [r0, #16]
 80a084e:	f7ff fd4d 	bl	80a02ec <hal_usart_peek>
}
 80a0852:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0856:	bd08      	pop	{r3, pc}

080a0858 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0858:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a085a:	7c00      	ldrb	r0, [r0, #16]
 80a085c:	f7ff fd3e 	bl	80a02dc <hal_usart_read>
}
 80a0860:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0864:	bd08      	pop	{r3, pc}

080a0866 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a0866:	7c00      	ldrb	r0, [r0, #16]
 80a0868:	f7ff bd48 	b.w	80a02fc <hal_usart_flush>

080a086c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a086c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a086e:	7c46      	ldrb	r6, [r0, #17]
{
 80a0870:	4604      	mov	r4, r0
 80a0872:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0874:	b12e      	cbz	r6, 80a0882 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a0876:	4629      	mov	r1, r5
 80a0878:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a087a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a087e:	f7ff bd1d 	b.w	80a02bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0882:	7c00      	ldrb	r0, [r0, #16]
 80a0884:	f7ff fd4a 	bl	80a031c <hal_usart_available_data_for_write>
 80a0888:	2800      	cmp	r0, #0
 80a088a:	dcf4      	bgt.n	80a0876 <_ZN11USARTSerial5writeEh+0xa>
}
 80a088c:	4630      	mov	r0, r6
 80a088e:	bd70      	pop	{r4, r5, r6, pc}

080a0890 <_ZN11USARTSerialD0Ev>:
 80a0890:	b510      	push	{r4, lr}
 80a0892:	4604      	mov	r4, r0
 80a0894:	2114      	movs	r1, #20
 80a0896:	f000 fae8 	bl	80a0e6a <_ZdlPvj>
 80a089a:	4620      	mov	r0, r4
 80a089c:	bd10      	pop	{r4, pc}
	...

080a08a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a08a0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a08a4:	b510      	push	{r4, lr}
 80a08a6:	4604      	mov	r4, r0
 80a08a8:	4608      	mov	r0, r1
 80a08aa:	4611      	mov	r1, r2
 80a08ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a08b0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a08b4:	4a04      	ldr	r2, [pc, #16]	; (80a08c8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a08b6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a08b8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a08ba:	2201      	movs	r2, #1
 80a08bc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a08be:	461a      	mov	r2, r3
 80a08c0:	f7ff fcf4 	bl	80a02ac <hal_usart_init>
}
 80a08c4:	4620      	mov	r0, r4
 80a08c6:	bd10      	pop	{r4, pc}
 80a08c8:	080a0fc0 	.word	0x080a0fc0

080a08cc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a08cc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a08ce:	4d0d      	ldr	r5, [pc, #52]	; (80a0904 <_Z22__fetch_global_Serial1v+0x38>)
 80a08d0:	7829      	ldrb	r1, [r5, #0]
 80a08d2:	f3bf 8f5b 	dmb	ish
 80a08d6:	f011 0401 	ands.w	r4, r1, #1
 80a08da:	d111      	bne.n	80a0900 <_Z22__fetch_global_Serial1v+0x34>
 80a08dc:	4628      	mov	r0, r5
 80a08de:	f7ff fbde 	bl	80a009e <__cxa_guard_acquire>
 80a08e2:	b168      	cbz	r0, 80a0900 <_Z22__fetch_global_Serial1v+0x34>
 80a08e4:	4621      	mov	r1, r4
 80a08e6:	4a08      	ldr	r2, [pc, #32]	; (80a0908 <_Z22__fetch_global_Serial1v+0x3c>)
 80a08e8:	4b08      	ldr	r3, [pc, #32]	; (80a090c <_Z22__fetch_global_Serial1v+0x40>)
 80a08ea:	4809      	ldr	r0, [pc, #36]	; (80a0910 <_Z22__fetch_global_Serial1v+0x44>)
 80a08ec:	f7ff ffd8 	bl	80a08a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a08f0:	4628      	mov	r0, r5
 80a08f2:	f7ff fbd9 	bl	80a00a8 <__cxa_guard_release>
 80a08f6:	4a07      	ldr	r2, [pc, #28]	; (80a0914 <_Z22__fetch_global_Serial1v+0x48>)
 80a08f8:	4907      	ldr	r1, [pc, #28]	; (80a0918 <_Z22__fetch_global_Serial1v+0x4c>)
 80a08fa:	4805      	ldr	r0, [pc, #20]	; (80a0910 <_Z22__fetch_global_Serial1v+0x44>)
 80a08fc:	f000 fab0 	bl	80a0e60 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0900:	4803      	ldr	r0, [pc, #12]	; (80a0910 <_Z22__fetch_global_Serial1v+0x44>)
 80a0902:	bd38      	pop	{r3, r4, r5, pc}
 80a0904:	200000b4 	.word	0x200000b4
 80a0908:	200000b8 	.word	0x200000b8
 80a090c:	2000013c 	.word	0x2000013c
 80a0910:	200001c0 	.word	0x200001c0
 80a0914:	20000068 	.word	0x20000068
 80a0918:	080a0829 	.word	0x080a0829

080a091c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a091c:	7441      	strb	r1, [r0, #17]
}
 80a091e:	4770      	bx	lr

080a0920 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0920:	4770      	bx	lr

080a0922 <_ZN9USBSerial4readEv>:
{
 80a0922:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0924:	2100      	movs	r1, #0
 80a0926:	7c00      	ldrb	r0, [r0, #16]
 80a0928:	f7ff fd18 	bl	80a035c <HAL_USB_USART_Receive_Data>
}
 80a092c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0930:	bd08      	pop	{r3, pc}

080a0932 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a0932:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0934:	2101      	movs	r1, #1
 80a0936:	7c00      	ldrb	r0, [r0, #16]
 80a0938:	f7ff fd10 	bl	80a035c <HAL_USB_USART_Receive_Data>
}
 80a093c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0940:	bd08      	pop	{r3, pc}

080a0942 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0942:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0944:	7c00      	ldrb	r0, [r0, #16]
 80a0946:	f7ff fd01 	bl	80a034c <HAL_USB_USART_Available_Data_For_Write>
}
 80a094a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a094e:	bd08      	pop	{r3, pc}

080a0950 <_ZN9USBSerial9availableEv>:
{
 80a0950:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0952:	7c00      	ldrb	r0, [r0, #16]
 80a0954:	f7ff fcf2 	bl	80a033c <HAL_USB_USART_Available_Data>
}
 80a0958:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a095c:	bd08      	pop	{r3, pc}

080a095e <_ZN9USBSerial5writeEh>:
{
 80a095e:	b538      	push	{r3, r4, r5, lr}
 80a0960:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0962:	7c00      	ldrb	r0, [r0, #16]
{
 80a0964:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0966:	f7ff fcf1 	bl	80a034c <HAL_USB_USART_Available_Data_For_Write>
 80a096a:	2800      	cmp	r0, #0
 80a096c:	dc01      	bgt.n	80a0972 <_ZN9USBSerial5writeEh+0x14>
 80a096e:	7c60      	ldrb	r0, [r4, #17]
 80a0970:	b128      	cbz	r0, 80a097e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0972:	4629      	mov	r1, r5
 80a0974:	7c20      	ldrb	r0, [r4, #16]
 80a0976:	f7ff fcf9 	bl	80a036c <HAL_USB_USART_Send_Data>
 80a097a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a097e:	bd38      	pop	{r3, r4, r5, pc}

080a0980 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0980:	7c00      	ldrb	r0, [r0, #16]
 80a0982:	f7ff bcfb 	b.w	80a037c <HAL_USB_USART_Flush_Data>

080a0986 <_ZN9USBSerialD0Ev>:
 80a0986:	b510      	push	{r4, lr}
 80a0988:	4604      	mov	r4, r0
 80a098a:	2114      	movs	r1, #20
 80a098c:	f000 fa6d 	bl	80a0e6a <_ZdlPvj>
 80a0990:	4620      	mov	r0, r4
 80a0992:	bd10      	pop	{r4, pc}

080a0994 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0994:	b510      	push	{r4, lr}
 80a0996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a099a:	4604      	mov	r4, r0
 80a099c:	4608      	mov	r0, r1
 80a099e:	2100      	movs	r1, #0
 80a09a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a09a4:	4b04      	ldr	r3, [pc, #16]	; (80a09b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a09a6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a09a8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a09aa:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a09ac:	4611      	mov	r1, r2
  _blocking = true;
 80a09ae:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a09b0:	f7ff fcbc 	bl	80a032c <HAL_USB_USART_Init>
}
 80a09b4:	4620      	mov	r0, r4
 80a09b6:	bd10      	pop	{r4, pc}
 80a09b8:	080a0ff0 	.word	0x080a0ff0

080a09bc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a09bc:	b510      	push	{r4, lr}
 80a09be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a09c0:	2214      	movs	r2, #20
 80a09c2:	2100      	movs	r1, #0
 80a09c4:	f000 fa72 	bl	80a0eac <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09c8:	4b05      	ldr	r3, [pc, #20]	; (80a09e0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a09ca:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a09cc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a09ce:	4b05      	ldr	r3, [pc, #20]	; (80a09e4 <_Z19acquireSerialBufferv+0x28>)
 80a09d0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a09d2:	f240 1301 	movw	r3, #257	; 0x101
 80a09d6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a09d8:	2381      	movs	r3, #129	; 0x81
 80a09da:	8223      	strh	r3, [r4, #16]
}
 80a09dc:	bd10      	pop	{r4, pc}
 80a09de:	bf00      	nop
 80a09e0:	20000204 	.word	0x20000204
 80a09e4:	20000305 	.word	0x20000305

080a09e8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a09e8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09ea:	4d0f      	ldr	r5, [pc, #60]	; (80a0a28 <_Z16_fetch_usbserialv+0x40>)
{
 80a09ec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a09ee:	a801      	add	r0, sp, #4
 80a09f0:	f7ff ffe4 	bl	80a09bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09f4:	7829      	ldrb	r1, [r5, #0]
 80a09f6:	f3bf 8f5b 	dmb	ish
 80a09fa:	f011 0401 	ands.w	r4, r1, #1
 80a09fe:	d110      	bne.n	80a0a22 <_Z16_fetch_usbserialv+0x3a>
 80a0a00:	4628      	mov	r0, r5
 80a0a02:	f7ff fb4c 	bl	80a009e <__cxa_guard_acquire>
 80a0a06:	b160      	cbz	r0, 80a0a22 <_Z16_fetch_usbserialv+0x3a>
 80a0a08:	4621      	mov	r1, r4
 80a0a0a:	aa01      	add	r2, sp, #4
 80a0a0c:	4807      	ldr	r0, [pc, #28]	; (80a0a2c <_Z16_fetch_usbserialv+0x44>)
 80a0a0e:	f7ff ffc1 	bl	80a0994 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a12:	4628      	mov	r0, r5
 80a0a14:	f7ff fb48 	bl	80a00a8 <__cxa_guard_release>
 80a0a18:	4a05      	ldr	r2, [pc, #20]	; (80a0a30 <_Z16_fetch_usbserialv+0x48>)
 80a0a1a:	4906      	ldr	r1, [pc, #24]	; (80a0a34 <_Z16_fetch_usbserialv+0x4c>)
 80a0a1c:	4803      	ldr	r0, [pc, #12]	; (80a0a2c <_Z16_fetch_usbserialv+0x44>)
 80a0a1e:	f000 fa1f 	bl	80a0e60 <__aeabi_atexit>
	return _usbserial;
}
 80a0a22:	4802      	ldr	r0, [pc, #8]	; (80a0a2c <_Z16_fetch_usbserialv+0x44>)
 80a0a24:	b007      	add	sp, #28
 80a0a26:	bd30      	pop	{r4, r5, pc}
 80a0a28:	200001d4 	.word	0x200001d4
 80a0a2c:	200001dc 	.word	0x200001dc
 80a0a30:	20000068 	.word	0x20000068
 80a0a34:	080a0921 	.word	0x080a0921

080a0a38 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0a38:	b510      	push	{r4, lr}
 80a0a3a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a3c:	2214      	movs	r2, #20
 80a0a3e:	2100      	movs	r1, #0
 80a0a40:	f000 fa34 	bl	80a0eac <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a44:	4b05      	ldr	r3, [pc, #20]	; (80a0a5c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0a46:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a48:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0a4a:	4b05      	ldr	r3, [pc, #20]	; (80a0a60 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0a4c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a4e:	f240 1301 	movw	r3, #257	; 0x101
 80a0a52:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a54:	2381      	movs	r3, #129	; 0x81
 80a0a56:	8223      	strh	r3, [r4, #16]
}
 80a0a58:	bd10      	pop	{r4, pc}
 80a0a5a:	bf00      	nop
 80a0a5c:	20000386 	.word	0x20000386
 80a0a60:	20000487 	.word	0x20000487

080a0a64 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0a64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a66:	4c0f      	ldr	r4, [pc, #60]	; (80a0aa4 <_Z17_fetch_usbserial1v+0x40>)
{
 80a0a68:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0a6a:	a801      	add	r0, sp, #4
 80a0a6c:	f7ff ffe4 	bl	80a0a38 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a70:	7823      	ldrb	r3, [r4, #0]
 80a0a72:	f3bf 8f5b 	dmb	ish
 80a0a76:	07db      	lsls	r3, r3, #31
 80a0a78:	d410      	bmi.n	80a0a9c <_Z17_fetch_usbserial1v+0x38>
 80a0a7a:	4620      	mov	r0, r4
 80a0a7c:	f7ff fb0f 	bl	80a009e <__cxa_guard_acquire>
 80a0a80:	b160      	cbz	r0, 80a0a9c <_Z17_fetch_usbserial1v+0x38>
 80a0a82:	2101      	movs	r1, #1
 80a0a84:	aa01      	add	r2, sp, #4
 80a0a86:	4808      	ldr	r0, [pc, #32]	; (80a0aa8 <_Z17_fetch_usbserial1v+0x44>)
 80a0a88:	f7ff ff84 	bl	80a0994 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a8c:	4620      	mov	r0, r4
 80a0a8e:	f7ff fb0b 	bl	80a00a8 <__cxa_guard_release>
 80a0a92:	4a06      	ldr	r2, [pc, #24]	; (80a0aac <_Z17_fetch_usbserial1v+0x48>)
 80a0a94:	4906      	ldr	r1, [pc, #24]	; (80a0ab0 <_Z17_fetch_usbserial1v+0x4c>)
 80a0a96:	4804      	ldr	r0, [pc, #16]	; (80a0aa8 <_Z17_fetch_usbserial1v+0x44>)
 80a0a98:	f000 f9e2 	bl	80a0e60 <__aeabi_atexit>
  return _usbserial1;
}
 80a0a9c:	4802      	ldr	r0, [pc, #8]	; (80a0aa8 <_Z17_fetch_usbserial1v+0x44>)
 80a0a9e:	b006      	add	sp, #24
 80a0aa0:	bd10      	pop	{r4, pc}
 80a0aa2:	bf00      	nop
 80a0aa4:	200001d8 	.word	0x200001d8
 80a0aa8:	200001f0 	.word	0x200001f0
 80a0aac:	20000068 	.word	0x20000068
 80a0ab0:	080a0921 	.word	0x080a0921

080a0ab4 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0ab4:	2200      	movs	r2, #0
 80a0ab6:	6840      	ldr	r0, [r0, #4]
 80a0ab8:	4611      	mov	r1, r2
 80a0aba:	f7ff bcab 	b.w	80a0414 <network_ready>

080a0abe <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a0abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ac0:	4615      	mov	r5, r2
 80a0ac2:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a0ac4:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0ac6:	460e      	mov	r6, r1
 80a0ac8:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0aca:	2100      	movs	r1, #0
 80a0acc:	a803      	add	r0, sp, #12
 80a0ace:	f000 f9ed 	bl	80a0eac <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ad2:	4628      	mov	r0, r5
 80a0ad4:	f000 fa16 	bl	80a0f04 <strlen>
 80a0ad8:	2700      	movs	r7, #0
 80a0ada:	b281      	uxth	r1, r0
 80a0adc:	6873      	ldr	r3, [r6, #4]
 80a0ade:	4628      	mov	r0, r5
 80a0ae0:	9700      	str	r7, [sp, #0]
 80a0ae2:	aa03      	add	r2, sp, #12
 80a0ae4:	f7ff fc52 	bl	80a038c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ae8:	b130      	cbz	r0, 80a0af8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0aea:	4639      	mov	r1, r7
 80a0aec:	4620      	mov	r0, r4
 80a0aee:	f7ff fd6b 	bl	80a05c8 <_ZN9IPAddressC1Em>
    }
 80a0af2:	4620      	mov	r0, r4
 80a0af4:	b009      	add	sp, #36	; 0x24
 80a0af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0af8:	4620      	mov	r0, r4
 80a0afa:	a903      	add	r1, sp, #12
 80a0afc:	f7ff fd52 	bl	80a05a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0b00:	e7f7      	b.n	80a0af2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0b02 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0b02:	2200      	movs	r2, #0
 80a0b04:	6840      	ldr	r0, [r0, #4]
 80a0b06:	4611      	mov	r1, r2
 80a0b08:	f7ff bca4 	b.w	80a0454 <network_listening>

080a0b0c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0b0c:	2200      	movs	r2, #0
 80a0b0e:	6840      	ldr	r0, [r0, #4]
 80a0b10:	4611      	mov	r1, r2
 80a0b12:	f7ff bcaf 	b.w	80a0474 <network_get_listen_timeout>

080a0b16 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0b16:	2200      	movs	r2, #0
 80a0b18:	6840      	ldr	r0, [r0, #4]
 80a0b1a:	f7ff bca3 	b.w	80a0464 <network_set_listen_timeout>

080a0b1e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0b1e:	2200      	movs	r2, #0
 80a0b20:	6840      	ldr	r0, [r0, #4]
 80a0b22:	f081 0101 	eor.w	r1, r1, #1
 80a0b26:	f7ff bc8d 	b.w	80a0444 <network_listen>

080a0b2a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0b2a:	2300      	movs	r3, #0
 80a0b2c:	6840      	ldr	r0, [r0, #4]
 80a0b2e:	461a      	mov	r2, r3
 80a0b30:	4619      	mov	r1, r3
 80a0b32:	f7ff bc7f 	b.w	80a0434 <network_off>

080a0b36 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a0b36:	2300      	movs	r3, #0
 80a0b38:	6840      	ldr	r0, [r0, #4]
 80a0b3a:	461a      	mov	r2, r3
 80a0b3c:	4619      	mov	r1, r3
 80a0b3e:	f7ff bc71 	b.w	80a0424 <network_on>

080a0b42 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0b42:	2200      	movs	r2, #0
 80a0b44:	6840      	ldr	r0, [r0, #4]
 80a0b46:	4611      	mov	r1, r2
 80a0b48:	f7ff bc54 	b.w	80a03f4 <network_connecting>

080a0b4c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0b4c:	2200      	movs	r2, #0
 80a0b4e:	2102      	movs	r1, #2
 80a0b50:	6840      	ldr	r0, [r0, #4]
 80a0b52:	f7ff bc57 	b.w	80a0404 <network_disconnect>

080a0b56 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0b56:	2300      	movs	r3, #0
 80a0b58:	6840      	ldr	r0, [r0, #4]
 80a0b5a:	461a      	mov	r2, r3
 80a0b5c:	f7ff bc42 	b.w	80a03e4 <network_connect>

080a0b60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0b60:	2204      	movs	r2, #4
 80a0b62:	4b02      	ldr	r3, [pc, #8]	; (80a0b6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0b64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0b66:	4a02      	ldr	r2, [pc, #8]	; (80a0b70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0b68:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0b6a:	4770      	bx	lr
 80a0b6c:	20000508 	.word	0x20000508
 80a0b70:	080a1020 	.word	0x080a1020

080a0b74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0b74:	4b01      	ldr	r3, [pc, #4]	; (80a0b7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0b76:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0b78:	4770      	bx	lr
 80a0b7a:	bf00      	nop
 80a0b7c:	20000004 	.word	0x20000004

080a0b80 <serialEventRun>:
{
 80a0b80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0b82:	4b13      	ldr	r3, [pc, #76]	; (80a0bd0 <serialEventRun+0x50>)
 80a0b84:	b143      	cbz	r3, 80a0b98 <serialEventRun+0x18>
 80a0b86:	f7ff ff2f 	bl	80a09e8 <_Z16_fetch_usbserialv>
 80a0b8a:	6803      	ldr	r3, [r0, #0]
 80a0b8c:	691b      	ldr	r3, [r3, #16]
 80a0b8e:	4798      	blx	r3
 80a0b90:	2800      	cmp	r0, #0
 80a0b92:	dd01      	ble.n	80a0b98 <serialEventRun+0x18>
        serialEvent();
 80a0b94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0b98:	4b0e      	ldr	r3, [pc, #56]	; (80a0bd4 <serialEventRun+0x54>)
 80a0b9a:	b143      	cbz	r3, 80a0bae <serialEventRun+0x2e>
 80a0b9c:	f7ff fe96 	bl	80a08cc <_Z22__fetch_global_Serial1v>
 80a0ba0:	6803      	ldr	r3, [r0, #0]
 80a0ba2:	691b      	ldr	r3, [r3, #16]
 80a0ba4:	4798      	blx	r3
 80a0ba6:	2800      	cmp	r0, #0
 80a0ba8:	dd01      	ble.n	80a0bae <serialEventRun+0x2e>
        serialEvent1();
 80a0baa:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0bae:	4b0a      	ldr	r3, [pc, #40]	; (80a0bd8 <serialEventRun+0x58>)
 80a0bb0:	b10b      	cbz	r3, 80a0bb6 <serialEventRun+0x36>
 80a0bb2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0bb6:	4b09      	ldr	r3, [pc, #36]	; (80a0bdc <serialEventRun+0x5c>)
 80a0bb8:	b143      	cbz	r3, 80a0bcc <serialEventRun+0x4c>
 80a0bba:	f7ff ff53 	bl	80a0a64 <_Z17_fetch_usbserial1v>
 80a0bbe:	6803      	ldr	r3, [r0, #0]
 80a0bc0:	691b      	ldr	r3, [r3, #16]
 80a0bc2:	4798      	blx	r3
 80a0bc4:	2800      	cmp	r0, #0
 80a0bc6:	dd01      	ble.n	80a0bcc <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0bc8:	f3af 8000 	nop.w
}
 80a0bcc:	bd08      	pop	{r3, pc}
 80a0bce:	bf00      	nop
	...

080a0be0 <_post_loop>:
{
 80a0be0:	b508      	push	{r3, lr}
	serialEventRun();
 80a0be2:	f7ff ffcd 	bl	80a0b80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0be6:	f7ff faef 	bl	80a01c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0bea:	4b01      	ldr	r3, [pc, #4]	; (80a0bf0 <_post_loop+0x10>)
 80a0bec:	6018      	str	r0, [r3, #0]
}
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	20000528 	.word	0x20000528

080a0bf4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0bf4:	4802      	ldr	r0, [pc, #8]	; (80a0c00 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0bf6:	4a03      	ldr	r2, [pc, #12]	; (80a0c04 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0bf8:	4903      	ldr	r1, [pc, #12]	; (80a0c08 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0bfa:	1a12      	subs	r2, r2, r0
 80a0bfc:	f000 b948 	b.w	80a0e90 <memcpy>
 80a0c00:	40024000 	.word	0x40024000
 80a0c04:	40024004 	.word	0x40024004
 80a0c08:	080a1080 	.word	0x080a1080

080a0c0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c0c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c0e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c10:	461a      	mov	r2, r3
 80a0c12:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c16:	9300      	str	r3, [sp, #0]
 80a0c18:	f7ff fbd2 	bl	80a03c0 <system_ctrl_set_result>
}
 80a0c1c:	b003      	add	sp, #12
 80a0c1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0c24 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0c24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0c26:	8843      	ldrh	r3, [r0, #2]
 80a0c28:	2b0a      	cmp	r3, #10
 80a0c2a:	d008      	beq.n	80a0c3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0c2c:	2b50      	cmp	r3, #80	; 0x50
 80a0c2e:	d10b      	bne.n	80a0c48 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0c30:	4b09      	ldr	r3, [pc, #36]	; (80a0c58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0c32:	681b      	ldr	r3, [r3, #0]
 80a0c34:	b14b      	cbz	r3, 80a0c4a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0c36:	b003      	add	sp, #12
 80a0c38:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0c3c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0c3e:	f7ff ffe5 	bl	80a0c0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0c42:	b003      	add	sp, #12
 80a0c44:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c48:	2300      	movs	r3, #0
 80a0c4a:	461a      	mov	r2, r3
 80a0c4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c50:	9300      	str	r3, [sp, #0]
 80a0c52:	f7ff fbb5 	bl	80a03c0 <system_ctrl_set_result>
}
 80a0c56:	e7f4      	b.n	80a0c42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0c58:	20000514 	.word	0x20000514

080a0c5c <module_user_init_hook>:
{
 80a0c5c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0c5e:	4c12      	ldr	r4, [pc, #72]	; (80a0ca8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0c60:	2100      	movs	r1, #0
 80a0c62:	4812      	ldr	r0, [pc, #72]	; (80a0cac <module_user_init_hook+0x50>)
 80a0c64:	f7ff fc1e 	bl	80a04a4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0c68:	4d11      	ldr	r5, [pc, #68]	; (80a0cb0 <module_user_init_hook+0x54>)
 80a0c6a:	6823      	ldr	r3, [r4, #0]
 80a0c6c:	42ab      	cmp	r3, r5
 80a0c6e:	bf0c      	ite	eq
 80a0c70:	2201      	moveq	r2, #1
 80a0c72:	2200      	movne	r2, #0
 80a0c74:	4b0f      	ldr	r3, [pc, #60]	; (80a0cb4 <module_user_init_hook+0x58>)
 80a0c76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0c78:	d002      	beq.n	80a0c80 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a0c7a:	f7ff ffbb 	bl	80a0bf4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0c7e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0c80:	f7ff fa9a 	bl	80a01b8 <HAL_RNG_GetRandomNumber>
 80a0c84:	4604      	mov	r4, r0
    srand(seed);
 80a0c86:	f000 f919 	bl	80a0ebc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0c8a:	4b0b      	ldr	r3, [pc, #44]	; (80a0cb8 <module_user_init_hook+0x5c>)
 80a0c8c:	b113      	cbz	r3, 80a0c94 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a0c8e:	4620      	mov	r0, r4
 80a0c90:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0c94:	2100      	movs	r1, #0
 80a0c96:	4808      	ldr	r0, [pc, #32]	; (80a0cb8 <module_user_init_hook+0x5c>)
 80a0c98:	f7ff fb9c 	bl	80a03d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0ca0:	2100      	movs	r1, #0
 80a0ca2:	4806      	ldr	r0, [pc, #24]	; (80a0cbc <module_user_init_hook+0x60>)
 80a0ca4:	f7ff bb82 	b.w	80a03ac <system_ctrl_set_app_request_handler>
 80a0ca8:	40024000 	.word	0x40024000
 80a0cac:	080a0b75 	.word	0x080a0b75
 80a0cb0:	9a271c1e 	.word	0x9a271c1e
 80a0cb4:	20000510 	.word	0x20000510
 80a0cb8:	00000000 	.word	0x00000000
 80a0cbc:	080a0c25 	.word	0x080a0c25

080a0cc0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a0cc0:	b510      	push	{r4, lr}
 80a0cc2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0cc4:	6880      	ldr	r0, [r0, #8]
 80a0cc6:	b108      	cbz	r0, 80a0ccc <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0cc8:	f7ff fa6e 	bl	80a01a8 <os_mutex_recursive_destroy>
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	bd10      	pop	{r4, pc}

080a0cd0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a0cd0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a0cd2:	b570      	push	{r4, r5, r6, lr}
 80a0cd4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a0cd6:	d901      	bls.n	80a0cdc <pinAvailable+0xc>
    return false;
 80a0cd8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a0cda:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0cdc:	f1a0 030d 	sub.w	r3, r0, #13
 80a0ce0:	2b02      	cmp	r3, #2
 80a0ce2:	d90b      	bls.n	80a0cfc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a0ce4:	2801      	cmp	r0, #1
 80a0ce6:	d826      	bhi.n	80a0d36 <pinAvailable+0x66>
 80a0ce8:	f000 f87a 	bl	80a0de0 <_Z19__fetch_global_Wirev>
 80a0cec:	2100      	movs	r1, #0
 80a0cee:	7c00      	ldrb	r0, [r0, #16]
 80a0cf0:	f7ff faba 	bl	80a0268 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0cf4:	f080 0001 	eor.w	r0, r0, #1
 80a0cf8:	b2c0      	uxtb	r0, r0
 80a0cfa:	e7ee      	b.n	80a0cda <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0cfc:	4e13      	ldr	r6, [pc, #76]	; (80a0d4c <pinAvailable+0x7c>)
 80a0cfe:	7831      	ldrb	r1, [r6, #0]
 80a0d00:	f3bf 8f5b 	dmb	ish
 80a0d04:	f011 0501 	ands.w	r5, r1, #1
 80a0d08:	d10f      	bne.n	80a0d2a <pinAvailable+0x5a>
 80a0d0a:	4630      	mov	r0, r6
 80a0d0c:	f7ff f9c7 	bl	80a009e <__cxa_guard_acquire>
 80a0d10:	b158      	cbz	r0, 80a0d2a <pinAvailable+0x5a>
 80a0d12:	4629      	mov	r1, r5
 80a0d14:	480e      	ldr	r0, [pc, #56]	; (80a0d50 <pinAvailable+0x80>)
 80a0d16:	f7ff fd41 	bl	80a079c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0d1a:	4630      	mov	r0, r6
 80a0d1c:	f7ff f9c4 	bl	80a00a8 <__cxa_guard_release>
 80a0d20:	4a0c      	ldr	r2, [pc, #48]	; (80a0d54 <pinAvailable+0x84>)
 80a0d22:	490d      	ldr	r1, [pc, #52]	; (80a0d58 <pinAvailable+0x88>)
 80a0d24:	480a      	ldr	r0, [pc, #40]	; (80a0d50 <pinAvailable+0x80>)
 80a0d26:	f000 f89b 	bl	80a0e60 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0d2a:	4b09      	ldr	r3, [pc, #36]	; (80a0d50 <pinAvailable+0x80>)
 80a0d2c:	7818      	ldrb	r0, [r3, #0]
 80a0d2e:	f7ff fab5 	bl	80a029c <hal_spi_is_enabled>
 80a0d32:	2800      	cmp	r0, #0
 80a0d34:	d1d0      	bne.n	80a0cd8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0d36:	3c12      	subs	r4, #18
 80a0d38:	2c01      	cmp	r4, #1
 80a0d3a:	d805      	bhi.n	80a0d48 <pinAvailable+0x78>
 80a0d3c:	f7ff fdc6 	bl	80a08cc <_Z22__fetch_global_Serial1v>
 80a0d40:	7c00      	ldrb	r0, [r0, #16]
 80a0d42:	f7ff fae3 	bl	80a030c <hal_usart_is_enabled>
 80a0d46:	e7d5      	b.n	80a0cf4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a0d48:	2001      	movs	r0, #1
 80a0d4a:	e7c6      	b.n	80a0cda <pinAvailable+0xa>
 80a0d4c:	20000518 	.word	0x20000518
 80a0d50:	2000051c 	.word	0x2000051c
 80a0d54:	20000068 	.word	0x20000068
 80a0d58:	080a0cc1 	.word	0x080a0cc1

080a0d5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0d5c:	2817      	cmp	r0, #23
{
 80a0d5e:	b538      	push	{r3, r4, r5, lr}
 80a0d60:	4604      	mov	r4, r0
 80a0d62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0d64:	d80a      	bhi.n	80a0d7c <pinMode+0x20>
 80a0d66:	29ff      	cmp	r1, #255	; 0xff
 80a0d68:	d008      	beq.n	80a0d7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a0d6a:	f7ff ffb1 	bl	80a0cd0 <pinAvailable>
 80a0d6e:	b128      	cbz	r0, 80a0d7c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a0d70:	4629      	mov	r1, r5
 80a0d72:	4620      	mov	r0, r4
}
 80a0d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a0d78:	f7ff ba36 	b.w	80a01e8 <HAL_Pin_Mode>
}
 80a0d7c:	bd38      	pop	{r3, r4, r5, pc}

080a0d7e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0d7e:	b538      	push	{r3, r4, r5, lr}
 80a0d80:	4604      	mov	r4, r0
 80a0d82:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0d84:	f7ff fa38 	bl	80a01f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0d88:	28ff      	cmp	r0, #255	; 0xff
 80a0d8a:	d010      	beq.n	80a0dae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a0d8c:	2806      	cmp	r0, #6
 80a0d8e:	d804      	bhi.n	80a0d9a <digitalWrite+0x1c>
 80a0d90:	234d      	movs	r3, #77	; 0x4d
 80a0d92:	fa23 f000 	lsr.w	r0, r3, r0
 80a0d96:	07c3      	lsls	r3, r0, #31
 80a0d98:	d409      	bmi.n	80a0dae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0d9a:	4620      	mov	r0, r4
 80a0d9c:	f7ff ff98 	bl	80a0cd0 <pinAvailable>
 80a0da0:	b128      	cbz	r0, 80a0dae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0da2:	4629      	mov	r1, r5
 80a0da4:	4620      	mov	r0, r4
}
 80a0da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a0daa:	f7ff ba2d 	b.w	80a0208 <HAL_GPIO_Write>
}
 80a0dae:	bd38      	pop	{r3, r4, r5, pc}

080a0db0 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a0db0:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a0db2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a0db4:	2520      	movs	r5, #32
 80a0db6:	8043      	strh	r3, [r0, #2]
 80a0db8:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dba:	4e08      	ldr	r6, [pc, #32]	; (80a0ddc <_Z17acquireWireBufferv+0x2c>)
{
 80a0dbc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a0dbe:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dc0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a0dc2:	6085      	str	r5, [r0, #8]
 80a0dc4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dc6:	4628      	mov	r0, r5
 80a0dc8:	f000 f851 	bl	80a0e6e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dcc:	4631      	mov	r1, r6
	};
 80a0dce:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dd0:	4628      	mov	r0, r5
 80a0dd2:	f000 f84c 	bl	80a0e6e <_ZnajRKSt9nothrow_t>
	};
 80a0dd6:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a0dd8:	4620      	mov	r0, r4
 80a0dda:	bd70      	pop	{r4, r5, r6, pc}
 80a0ddc:	080a104c 	.word	0x080a104c

080a0de0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0de0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0de2:	4d0f      	ldr	r5, [pc, #60]	; (80a0e20 <_Z19__fetch_global_Wirev+0x40>)
{
 80a0de4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0de6:	7829      	ldrb	r1, [r5, #0]
 80a0de8:	f3bf 8f5b 	dmb	ish
 80a0dec:	f011 0401 	ands.w	r4, r1, #1
 80a0df0:	d113      	bne.n	80a0e1a <_Z19__fetch_global_Wirev+0x3a>
 80a0df2:	4628      	mov	r0, r5
 80a0df4:	f7ff f953 	bl	80a009e <__cxa_guard_acquire>
 80a0df8:	b178      	cbz	r0, 80a0e1a <_Z19__fetch_global_Wirev+0x3a>
 80a0dfa:	a801      	add	r0, sp, #4
 80a0dfc:	f7ff ffd8 	bl	80a0db0 <_Z17acquireWireBufferv>
 80a0e00:	4621      	mov	r1, r4
 80a0e02:	aa01      	add	r2, sp, #4
 80a0e04:	4807      	ldr	r0, [pc, #28]	; (80a0e24 <_Z19__fetch_global_Wirev+0x44>)
 80a0e06:	f7ff fb8b 	bl	80a0520 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a0e0a:	4628      	mov	r0, r5
 80a0e0c:	f7ff f94c 	bl	80a00a8 <__cxa_guard_release>
 80a0e10:	4a05      	ldr	r2, [pc, #20]	; (80a0e28 <_Z19__fetch_global_Wirev+0x48>)
 80a0e12:	4906      	ldr	r1, [pc, #24]	; (80a0e2c <_Z19__fetch_global_Wirev+0x4c>)
 80a0e14:	4803      	ldr	r0, [pc, #12]	; (80a0e24 <_Z19__fetch_global_Wirev+0x44>)
 80a0e16:	f000 f823 	bl	80a0e60 <__aeabi_atexit>
	return wire;
}
 80a0e1a:	4802      	ldr	r0, [pc, #8]	; (80a0e24 <_Z19__fetch_global_Wirev+0x44>)
 80a0e1c:	b007      	add	sp, #28
 80a0e1e:	bd30      	pop	{r4, r5, pc}
 80a0e20:	2000052c 	.word	0x2000052c
 80a0e24:	20000530 	.word	0x20000530
 80a0e28:	20000068 	.word	0x20000068
 80a0e2c:	080a04c7 	.word	0x080a04c7

080a0e30 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0e30:	2300      	movs	r3, #0
 80a0e32:	b513      	push	{r0, r1, r4, lr}
 80a0e34:	4c07      	ldr	r4, [pc, #28]	; (80a0e54 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0e36:	461a      	mov	r2, r3
 80a0e38:	4619      	mov	r1, r3
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	9300      	str	r3, [sp, #0]
 80a0e3e:	f7ff fbd9 	bl	80a05f4 <_ZN9IPAddressC1Ehhhh>
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	4a04      	ldr	r2, [pc, #16]	; (80a0e58 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0e46:	4905      	ldr	r1, [pc, #20]	; (80a0e5c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0e48:	b002      	add	sp, #8
 80a0e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0e4e:	f000 b807 	b.w	80a0e60 <__aeabi_atexit>
 80a0e52:	bf00      	nop
 80a0e54:	20000544 	.word	0x20000544
 80a0e58:	20000068 	.word	0x20000068
 80a0e5c:	080a0545 	.word	0x080a0545

080a0e60 <__aeabi_atexit>:
 80a0e60:	460b      	mov	r3, r1
 80a0e62:	4601      	mov	r1, r0
 80a0e64:	4618      	mov	r0, r3
 80a0e66:	f000 b805 	b.w	80a0e74 <__cxa_atexit>

080a0e6a <_ZdlPvj>:
 80a0e6a:	f7ff b916 	b.w	80a009a <_ZdlPv>

080a0e6e <_ZnajRKSt9nothrow_t>:
 80a0e6e:	f7ff b912 	b.w	80a0096 <_Znaj>
	...

080a0e74 <__cxa_atexit>:
 80a0e74:	b510      	push	{r4, lr}
 80a0e76:	4604      	mov	r4, r0
 80a0e78:	4804      	ldr	r0, [pc, #16]	; (80a0e8c <__cxa_atexit+0x18>)
 80a0e7a:	4613      	mov	r3, r2
 80a0e7c:	b120      	cbz	r0, 80a0e88 <__cxa_atexit+0x14>
 80a0e7e:	460a      	mov	r2, r1
 80a0e80:	2002      	movs	r0, #2
 80a0e82:	4621      	mov	r1, r4
 80a0e84:	f3af 8000 	nop.w
 80a0e88:	bd10      	pop	{r4, pc}
 80a0e8a:	bf00      	nop
 80a0e8c:	00000000 	.word	0x00000000

080a0e90 <memcpy>:
 80a0e90:	440a      	add	r2, r1
 80a0e92:	4291      	cmp	r1, r2
 80a0e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a0e98:	d100      	bne.n	80a0e9c <memcpy+0xc>
 80a0e9a:	4770      	bx	lr
 80a0e9c:	b510      	push	{r4, lr}
 80a0e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0ea2:	4291      	cmp	r1, r2
 80a0ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0ea8:	d1f9      	bne.n	80a0e9e <memcpy+0xe>
 80a0eaa:	bd10      	pop	{r4, pc}

080a0eac <memset>:
 80a0eac:	4603      	mov	r3, r0
 80a0eae:	4402      	add	r2, r0
 80a0eb0:	4293      	cmp	r3, r2
 80a0eb2:	d100      	bne.n	80a0eb6 <memset+0xa>
 80a0eb4:	4770      	bx	lr
 80a0eb6:	f803 1b01 	strb.w	r1, [r3], #1
 80a0eba:	e7f9      	b.n	80a0eb0 <memset+0x4>

080a0ebc <srand>:
 80a0ebc:	b538      	push	{r3, r4, r5, lr}
 80a0ebe:	4b0d      	ldr	r3, [pc, #52]	; (80a0ef4 <srand+0x38>)
 80a0ec0:	4604      	mov	r4, r0
 80a0ec2:	681d      	ldr	r5, [r3, #0]
 80a0ec4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0ec6:	b97b      	cbnz	r3, 80a0ee8 <srand+0x2c>
 80a0ec8:	2018      	movs	r0, #24
 80a0eca:	f7ff fadb 	bl	80a0484 <malloc>
 80a0ece:	4a0a      	ldr	r2, [pc, #40]	; (80a0ef8 <srand+0x3c>)
 80a0ed0:	4b0a      	ldr	r3, [pc, #40]	; (80a0efc <srand+0x40>)
 80a0ed2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a0ed4:	e9c0 2300 	strd	r2, r3, [r0]
 80a0ed8:	4b09      	ldr	r3, [pc, #36]	; (80a0f00 <srand+0x44>)
 80a0eda:	2201      	movs	r2, #1
 80a0edc:	6083      	str	r3, [r0, #8]
 80a0ede:	230b      	movs	r3, #11
 80a0ee0:	8183      	strh	r3, [r0, #12]
 80a0ee2:	2300      	movs	r3, #0
 80a0ee4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a0ee8:	2200      	movs	r2, #0
 80a0eea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0eec:	611c      	str	r4, [r3, #16]
 80a0eee:	615a      	str	r2, [r3, #20]
 80a0ef0:	bd38      	pop	{r3, r4, r5, pc}
 80a0ef2:	bf00      	nop
 80a0ef4:	20000004 	.word	0x20000004
 80a0ef8:	abcd330e 	.word	0xabcd330e
 80a0efc:	e66d1234 	.word	0xe66d1234
 80a0f00:	0005deec 	.word	0x0005deec

080a0f04 <strlen>:
 80a0f04:	4603      	mov	r3, r0
 80a0f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0f0a:	2a00      	cmp	r2, #0
 80a0f0c:	d1fb      	bne.n	80a0f06 <strlen+0x2>
 80a0f0e:	1a18      	subs	r0, r3, r0
 80a0f10:	3801      	subs	r0, #1
 80a0f12:	4770      	bx	lr

080a0f14 <dynalib_user>:
 80a0f14:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a0f24:	0000 0000                                   ....

080a0f28 <_ZTV7TwoWire>:
	...
 80a0f30:	04c7 080a 0511 080a 04e9 080a 04c9 080a     ................
 80a0f40:	04f1 080a 04f9 080a 0501 080a 0509 080a     ................

080a0f50 <_ZTV9IPAddress>:
	...
 80a0f58:	0555 080a 0545 080a 0547 080a 7061 0070     U...E...G...app.

080a0f68 <_ZTVN5spark12NetworkClassE>:
	...
 80a0f70:	061d 080a 0627 080a 0631 080a 063b 080a     ....'...1...;...
 80a0f80:	0645 080a 0651 080a 065d 080a 0669 080a     E...Q...]...i...
 80a0f90:	0671 080a 067b 080a 0685 080a 5925 252d     q...{.......%Y-%
 80a0fa0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a0fb0:	7361 7463 6d69 0065                         asctime.

080a0fb8 <_ZTV11USARTSerial>:
	...
 80a0fc0:	0829 080a 0891 080a 086d 080a 06e9 080a     ).......m.......
 80a0fd0:	083d 080a 0859 080a 084b 080a 0867 080a     =...Y...K...g...
 80a0fe0:	082b 080a 082f 080a                         +.../...

080a0fe8 <_ZTV9USBSerial>:
	...
 80a0ff0:	0921 080a 0987 080a 095f 080a 06e9 080a     !......._.......
 80a1000:	0951 080a 0923 080a 0933 080a 0981 080a     Q...#...3.......
 80a1010:	0943 080a 091d 080a                         C.......

080a1018 <_ZTVN5spark9WiFiClassE>:
	...
 80a1020:	0b57 080a 0b4d 080a 0b43 080a 0ab5 080a     W...M...C.......
 80a1030:	0b37 080a 0b2b 080a 0b1f 080a 0b17 080a     7...+...........
 80a1040:	0b0d 080a 0b03 080a 0abf 080a               ............

080a104c <_ZSt7nothrow>:
	...

080a104d <link_const_variable_data_end>:
 80a104d:	00          	.byte	0x00
	...

080a1050 <link_constructors_location>:
 80a1050:	080a00b5 	.word	0x080a00b5
 80a1054:	080a0189 	.word	0x080a0189
 80a1058:	080a060d 	.word	0x080a060d
 80a105c:	080a06d5 	.word	0x080a06d5
 80a1060:	080a0781 	.word	0x080a0781
 80a1064:	080a07d9 	.word	0x080a07d9
 80a1068:	080a0815 	.word	0x080a0815
 80a106c:	080a0b61 	.word	0x080a0b61
 80a1070:	080a0e31 	.word	0x080a0e31

080a1074 <link_constructors_end>:
	...
