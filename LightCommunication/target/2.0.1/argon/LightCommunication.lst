
/Users/christian/Documents/MorseCommunication/LightCommunication/target/2.0.1/argon/LightCommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5a30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e58c  000d5a34  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f4  2003e5fc  2003e5fc  0002e5fc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5aa4  000d5aa4  00025aa4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5acc  000d5acc  00025acc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00122764  00000000  00000000  00025ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013638  00000000  00000000  00148234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000269e6  00000000  00000000  0015b86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022a8  00000000  00000000  00182252  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006d20  00000000  00000000  001844fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000341c9  00000000  00000000  0018b21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000312d1  00000000  00000000  001bf3e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107ab6  00000000  00000000  001f06b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005c50  00000000  00000000  002f816c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fbc9 	bl	d57c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fbd1 	bl	d57e0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e58c 	.word	0x2003e58c
   d4048:	000d5a34 	.word	0x000d5a34
   d404c:	2003e5fc 	.word	0x2003e5fc
   d4050:	2003e5fc 	.word	0x2003e5fc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 faa7 	bl	d55b0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5a08 	.word	0x000d5a08
   d407c:	000d5a30 	.word	0x000d5a30

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b82a 	b.w	d40d8 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f9cf 	bl	d4428 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 ba51 	b.w	d5534 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 be3d 	b.w	d4d10 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 be43 	b.w	d4d20 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fe35 	bl	d4d20 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}

000d40ba <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	b40e      	push	{r1, r2, r3}
   d40bc:	b503      	push	{r0, r1, lr}
   d40be:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40c0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c8:	f001 f85b 	bl	d5182 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40cc:	b002      	add	sp, #8
   d40ce:	f85d eb04 	ldr.w	lr, [sp], #4
   d40d2:	b003      	add	sp, #12
   d40d4:	4770      	bx	lr
	...

000d40d8 <setup>:

bool calState=true;
bool cameraState=false;
bool morseState=false;

void setup() {
   d40d8:	b508      	push	{r3, lr}
  pinMode(soilPin, INPUT);
   d40da:	4b0b      	ldr	r3, [pc, #44]	; (d4108 <setup+0x30>)
   d40dc:	2100      	movs	r1, #0
   d40de:	8818      	ldrh	r0, [r3, #0]
   d40e0:	f001 fad6 	bl	d5690 <pinMode>
  pixel.begin();
   d40e4:	4809      	ldr	r0, [pc, #36]	; (d410c <setup+0x34>)
   d40e6:	f000 fa2e 	bl	d4546 <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.show();
   d40ea:	4808      	ldr	r0, [pc, #32]	; (d410c <setup+0x34>)
   d40ec:	f000 fa64 	bl	d45b8 <_ZN17Adafruit_NeoPixel4showEv>
  pixel.clear();
   d40f0:	4806      	ldr	r0, [pc, #24]	; (d410c <setup+0x34>)
   d40f2:	f000 fc5b 	bl	d49ac <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.setBrightness(20);
   d40f6:	4805      	ldr	r0, [pc, #20]	; (d410c <setup+0x34>)
   d40f8:	2114      	movs	r1, #20
   d40fa:	f000 fc31 	bl	d4960 <_ZN17Adafruit_NeoPixel13setBrightnessEh>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40fe:	f000 fc8b 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  currentTime=millis();
   d4102:	4b03      	ldr	r3, [pc, #12]	; (d4110 <setup+0x38>)
   d4104:	6018      	str	r0, [r3, #0]
}
   d4106:	bd08      	pop	{r3, pc}
   d4108:	2003e590 	.word	0x2003e590
   d410c:	2003e624 	.word	0x2003e624
   d4110:	2003e614 	.word	0x2003e614

000d4114 <_Z4dashv>:
      }
    }
  }
}

void dash(){
   d4114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4116:	f000 fc7f 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  unsigned int dashOnTime=millis();
  while(millis()-dashOnTime<300){
    for(n=0;n<=12;n++){
   d411a:	4c17      	ldr	r4, [pc, #92]	; (d4178 <_Z4dashv+0x64>)
      pixel.setPixelColor(n,255,255,255);
   d411c:	4e17      	ldr	r6, [pc, #92]	; (d417c <_Z4dashv+0x68>)
   d411e:	4605      	mov	r5, r0
   d4120:	f000 fc7a 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  while(millis()-dashOnTime<300){
   d4124:	1b40      	subs	r0, r0, r5
   d4126:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   d412a:	d212      	bcs.n	d4152 <_Z4dashv+0x3e>
    for(n=0;n<=12;n++){
   d412c:	2300      	movs	r3, #0
   d412e:	7023      	strb	r3, [r4, #0]
      pixel.setPixelColor(n,255,255,255);
   d4130:	27ff      	movs	r7, #255	; 0xff
    for(n=0;n<=12;n++){
   d4132:	7821      	ldrb	r1, [r4, #0]
   d4134:	290c      	cmp	r1, #12
   d4136:	d8f3      	bhi.n	d4120 <_Z4dashv+0xc>
      pixel.setPixelColor(n,255,255,255);
   d4138:	23ff      	movs	r3, #255	; 0xff
   d413a:	461a      	mov	r2, r3
   d413c:	4630      	mov	r0, r6
   d413e:	9700      	str	r7, [sp, #0]
   d4140:	f000 fbe0 	bl	d4904 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
      pixel.show();
   d4144:	4630      	mov	r0, r6
   d4146:	f000 fa37 	bl	d45b8 <_ZN17Adafruit_NeoPixel4showEv>
    for(n=0;n<=12;n++){
   d414a:	7823      	ldrb	r3, [r4, #0]
   d414c:	3301      	adds	r3, #1
   d414e:	7023      	strb	r3, [r4, #0]
   d4150:	e7ef      	b.n	d4132 <_Z4dashv+0x1e>
   d4152:	f000 fc61 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
    }
  }
  unsigned int dashOffTime=millis();
  while(millis()-dashOffTime<100){
    pixel.clear();
   d4156:	4d09      	ldr	r5, [pc, #36]	; (d417c <_Z4dashv+0x68>)
   d4158:	4604      	mov	r4, r0
   d415a:	f000 fc5d 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  while(millis()-dashOffTime<100){
   d415e:	1b00      	subs	r0, r0, r4
   d4160:	2863      	cmp	r0, #99	; 0x63
   d4162:	d806      	bhi.n	d4172 <_Z4dashv+0x5e>
    pixel.clear();
   d4164:	4628      	mov	r0, r5
   d4166:	f000 fc21 	bl	d49ac <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.show();
   d416a:	4628      	mov	r0, r5
   d416c:	f000 fa24 	bl	d45b8 <_ZN17Adafruit_NeoPixel4showEv>
  while(millis()-dashOffTime<100){
   d4170:	e7f3      	b.n	d415a <_Z4dashv+0x46>
  }
}
   d4172:	b003      	add	sp, #12
   d4174:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4176:	bf00      	nop
   d4178:	2003e620 	.word	0x2003e620
   d417c:	2003e624 	.word	0x2003e624

000d4180 <_Z3dotv>:

void dot(){
   d4180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4182:	f000 fc49 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  unsigned int dotOnTime=millis();
  while(millis()-dotOnTime<100){
    for(n=0;n<=12;n++){
   d4186:	4c16      	ldr	r4, [pc, #88]	; (d41e0 <_Z3dotv+0x60>)
      pixel.setPixelColor(n,255,255,255);
   d4188:	4e16      	ldr	r6, [pc, #88]	; (d41e4 <_Z3dotv+0x64>)
   d418a:	4605      	mov	r5, r0
   d418c:	f000 fc44 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  while(millis()-dotOnTime<100){
   d4190:	1b40      	subs	r0, r0, r5
   d4192:	2863      	cmp	r0, #99	; 0x63
   d4194:	d812      	bhi.n	d41bc <_Z3dotv+0x3c>
    for(n=0;n<=12;n++){
   d4196:	2300      	movs	r3, #0
   d4198:	7023      	strb	r3, [r4, #0]
      pixel.setPixelColor(n,255,255,255);
   d419a:	27ff      	movs	r7, #255	; 0xff
    for(n=0;n<=12;n++){
   d419c:	7821      	ldrb	r1, [r4, #0]
   d419e:	290c      	cmp	r1, #12
   d41a0:	d8f4      	bhi.n	d418c <_Z3dotv+0xc>
      pixel.setPixelColor(n,255,255,255);
   d41a2:	23ff      	movs	r3, #255	; 0xff
   d41a4:	461a      	mov	r2, r3
   d41a6:	4630      	mov	r0, r6
   d41a8:	9700      	str	r7, [sp, #0]
   d41aa:	f000 fbab 	bl	d4904 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
      pixel.show();
   d41ae:	4630      	mov	r0, r6
   d41b0:	f000 fa02 	bl	d45b8 <_ZN17Adafruit_NeoPixel4showEv>
    for(n=0;n<=12;n++){
   d41b4:	7823      	ldrb	r3, [r4, #0]
   d41b6:	3301      	adds	r3, #1
   d41b8:	7023      	strb	r3, [r4, #0]
   d41ba:	e7ef      	b.n	d419c <_Z3dotv+0x1c>
   d41bc:	f000 fc2c 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
    }
  }
  unsigned int dotOffTime=millis();
  while(millis()-dotOffTime<100){
    pixel.clear();
   d41c0:	4d08      	ldr	r5, [pc, #32]	; (d41e4 <_Z3dotv+0x64>)
   d41c2:	4604      	mov	r4, r0
   d41c4:	f000 fc28 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  while(millis()-dotOffTime<100){
   d41c8:	1b00      	subs	r0, r0, r4
   d41ca:	2863      	cmp	r0, #99	; 0x63
   d41cc:	d806      	bhi.n	d41dc <_Z3dotv+0x5c>
    pixel.clear();
   d41ce:	4628      	mov	r0, r5
   d41d0:	f000 fbec 	bl	d49ac <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.show();
   d41d4:	4628      	mov	r0, r5
   d41d6:	f000 f9ef 	bl	d45b8 <_ZN17Adafruit_NeoPixel4showEv>
  while(millis()-dotOffTime<100){
   d41da:	e7f3      	b.n	d41c4 <_Z3dotv+0x44>
  }
}
   d41dc:	b003      	add	sp, #12
   d41de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d41e0:	2003e620 	.word	0x2003e620
   d41e4:	2003e624 	.word	0x2003e624

000d41e8 <_Z5spacev>:

void space(){
   d41e8:	b538      	push	{r3, r4, r5, lr}
   d41ea:	f000 fc15 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  unsigned int spaceTime=millis();
  while(millis()-spaceTime<300){
    pixel.clear();
   d41ee:	4d08      	ldr	r5, [pc, #32]	; (d4210 <_Z5spacev+0x28>)
   d41f0:	4604      	mov	r4, r0
   d41f2:	f000 fc11 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  while(millis()-spaceTime<300){
   d41f6:	1b00      	subs	r0, r0, r4
   d41f8:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   d41fc:	d206      	bcs.n	d420c <_Z5spacev+0x24>
    pixel.clear();
   d41fe:	4628      	mov	r0, r5
   d4200:	f000 fbd4 	bl	d49ac <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.show();
   d4204:	4628      	mov	r0, r5
   d4206:	f000 f9d7 	bl	d45b8 <_ZN17Adafruit_NeoPixel4showEv>
  while(millis()-spaceTime<300){
   d420a:	e7f2      	b.n	d41f2 <_Z5spacev+0xa>
  }
   d420c:	bd38      	pop	{r3, r4, r5, pc}
   d420e:	bf00      	nop
   d4210:	2003e624 	.word	0x2003e624

000d4214 <_Z9sendMorsev>:
void sendMorse(){  //.-. / -.-.- <your message> .-.-. //format for sending messages
   d4214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(calState==true){
   d4218:	4d77      	ldr	r5, [pc, #476]	; (d43f8 <_Z9sendMorsev+0x1e4>)
   d421a:	4c78      	ldr	r4, [pc, #480]	; (d43fc <_Z9sendMorsev+0x1e8>)
   d421c:	782b      	ldrb	r3, [r5, #0]
   d421e:	b193      	cbz	r3, d4246 <_Z9sendMorsev+0x32>
    dot(); dash(); dot(); //calibrate camera brightness
   d4220:	f7ff ffae 	bl	d4180 <_Z3dotv>
   d4224:	f7ff ff76 	bl	d4114 <_Z4dashv>
   d4228:	f7ff ffaa 	bl	d4180 <_Z3dotv>
    calState=false;
   d422c:	2300      	movs	r3, #0
   d422e:	702b      	strb	r3, [r5, #0]
    cameraState=true;
   d4230:	4b73      	ldr	r3, [pc, #460]	; (d4400 <_Z9sendMorsev+0x1ec>)
   d4232:	2201      	movs	r2, #1
   d4234:	701a      	strb	r2, [r3, #0]
   d4236:	f000 fbef 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
    cameraTime=millis();
   d423a:	6020      	str	r0, [r4, #0]
    Serial.printf("Calibrate\n");
   d423c:	f001 f8f0 	bl	d5420 <_Z16_fetch_usbserialv>
   d4240:	4970      	ldr	r1, [pc, #448]	; (d4404 <_Z9sendMorsev+0x1f0>)
   d4242:	f7ff ff3a 	bl	d40ba <_ZN5Print6printfEPKcz>
   d4246:	f000 fbe7 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  if(millis()-cameraTime>300&&cameraState==true){
   d424a:	6823      	ldr	r3, [r4, #0]
   d424c:	4c6e      	ldr	r4, [pc, #440]	; (d4408 <_Z9sendMorsev+0x1f4>)
   d424e:	1ac0      	subs	r0, r0, r3
   d4250:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   d4254:	d919      	bls.n	d428a <_Z9sendMorsev+0x76>
   d4256:	4e6a      	ldr	r6, [pc, #424]	; (d4400 <_Z9sendMorsev+0x1ec>)
   d4258:	7833      	ldrb	r3, [r6, #0]
   d425a:	b1b3      	cbz	r3, d428a <_Z9sendMorsev+0x76>
   dash(); dot(); dash(); dot(); dash();//gain camera attention
   d425c:	f7ff ff5a 	bl	d4114 <_Z4dashv>
   d4260:	f7ff ff8e 	bl	d4180 <_Z3dotv>
   d4264:	f7ff ff56 	bl	d4114 <_Z4dashv>
   d4268:	f7ff ff8a 	bl	d4180 <_Z3dotv>
   d426c:	f7ff ff52 	bl	d4114 <_Z4dashv>
   cameraState=false;
   d4270:	2300      	movs	r3, #0
   d4272:	7033      	strb	r3, [r6, #0]
   morseState=true;
   d4274:	4b65      	ldr	r3, [pc, #404]	; (d440c <_Z9sendMorsev+0x1f8>)
   d4276:	2201      	movs	r2, #1
   d4278:	701a      	strb	r2, [r3, #0]
   d427a:	f000 fbcd 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
   morseTime=millis();
   d427e:	6020      	str	r0, [r4, #0]
   Serial.printf("Camera\n");
   d4280:	f001 f8ce 	bl	d5420 <_Z16_fetch_usbserialv>
   d4284:	4962      	ldr	r1, [pc, #392]	; (d4410 <_Z9sendMorsev+0x1fc>)
   d4286:	f7ff ff18 	bl	d40ba <_ZN5Print6printfEPKcz>
   d428a:	f000 fbc5 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  if(millis()-morseTime>300&&morseState==true){
   d428e:	6823      	ldr	r3, [r4, #0]
   d4290:	1ac0      	subs	r0, r0, r3
   d4292:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   d4296:	d94b      	bls.n	d4330 <_Z9sendMorsev+0x11c>
   d4298:	4e5c      	ldr	r6, [pc, #368]	; (d440c <_Z9sendMorsev+0x1f8>)
   d429a:	7833      	ldrb	r3, [r6, #0]
   d429c:	2b00      	cmp	r3, #0
   d429e:	d047      	beq.n	d4330 <_Z9sendMorsev+0x11c>
    for(i=0;i<4;i++){ //loop for sending morse code to neopixel
   d42a0:	4c5c      	ldr	r4, [pc, #368]	; (d4414 <_Z9sendMorsev+0x200>)
      Serial.printf("soil[i] = %i i = %i\n",soil[i],i);
   d42a2:	4f5d      	ldr	r7, [pc, #372]	; (d4418 <_Z9sendMorsev+0x204>)
   d42a4:	f8df 8178 	ldr.w	r8, [pc, #376]	; d4420 <_Z9sendMorsev+0x20c>
        Serial.printf("Over\n");
   d42a8:	f8df 9178 	ldr.w	r9, [pc, #376]	; d4424 <_Z9sendMorsev+0x210>
    for(i=0;i<4;i++){ //loop for sending morse code to neopixel
   d42ac:	2300      	movs	r3, #0
   d42ae:	7023      	strb	r3, [r4, #0]
      Serial.printf("soil[i] = %i i = %i\n",soil[i],i);
   d42b0:	f001 f8b6 	bl	d5420 <_Z16_fetch_usbserialv>
   d42b4:	7823      	ldrb	r3, [r4, #0]
   d42b6:	4641      	mov	r1, r8
   d42b8:	5cfa      	ldrb	r2, [r7, r3]
   d42ba:	f7ff fefe 	bl	d40ba <_ZN5Print6printfEPKcz>
      switch (soil[i]){
   d42be:	7823      	ldrb	r3, [r4, #0]
   d42c0:	5cfb      	ldrb	r3, [r7, r3]
   d42c2:	2b09      	cmp	r3, #9
   d42c4:	d812      	bhi.n	d42ec <_Z9sendMorsev+0xd8>
   d42c6:	e8df f003 	tbb	[pc, r3]
   d42ca:	3505      	.short	0x3505
   d42cc:	5f524538 	.word	0x5f524538
   d42d0:	897c6f6c 	.word	0x897c6f6c
          dash(); dash(); dash(); dash(); dash(); space(); break;
   d42d4:	f7ff ff1e 	bl	d4114 <_Z4dashv>
          dot(); dash(); dash(); dash(); dash(); space(); break;
   d42d8:	f7ff ff1c 	bl	d4114 <_Z4dashv>
   d42dc:	f7ff ff1a 	bl	d4114 <_Z4dashv>
   d42e0:	f7ff ff18 	bl	d4114 <_Z4dashv>
   d42e4:	f7ff ff16 	bl	d4114 <_Z4dashv>
   d42e8:	f7ff ff7e 	bl	d41e8 <_Z5spacev>
      if(i==3){
   d42ec:	7823      	ldrb	r3, [r4, #0]
   d42ee:	2b03      	cmp	r3, #3
   d42f0:	d118      	bne.n	d4324 <_Z9sendMorsev+0x110>
        dot(); dash(); dot(); dash(); dot(); //end of message
   d42f2:	f7ff ff45 	bl	d4180 <_Z3dotv>
   d42f6:	f7ff ff0d 	bl	d4114 <_Z4dashv>
   d42fa:	f7ff ff41 	bl	d4180 <_Z3dotv>
   d42fe:	f7ff ff09 	bl	d4114 <_Z4dashv>
   d4302:	f7ff ff3d 	bl	d4180 <_Z3dotv>
        Serial.printf("Over\n");
   d4306:	f001 f88b 	bl	d5420 <_Z16_fetch_usbserialv>
   d430a:	4649      	mov	r1, r9
   d430c:	f7ff fed5 	bl	d40ba <_ZN5Print6printfEPKcz>
   d4310:	f000 fb82 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
        currentTime=millis();
   d4314:	4b41      	ldr	r3, [pc, #260]	; (d441c <_Z9sendMorsev+0x208>)
        cameraState=false;
   d4316:	4a3a      	ldr	r2, [pc, #232]	; (d4400 <_Z9sendMorsev+0x1ec>)
        currentTime=millis();
   d4318:	6018      	str	r0, [r3, #0]
        calState=true;
   d431a:	2301      	movs	r3, #1
   d431c:	702b      	strb	r3, [r5, #0]
        cameraState=false;
   d431e:	2300      	movs	r3, #0
   d4320:	7013      	strb	r3, [r2, #0]
        morseState=false;
   d4322:	7033      	strb	r3, [r6, #0]
    for(i=0;i<4;i++){ //loop for sending morse code to neopixel
   d4324:	7823      	ldrb	r3, [r4, #0]
   d4326:	3301      	adds	r3, #1
   d4328:	b2db      	uxtb	r3, r3
   d432a:	2b03      	cmp	r3, #3
   d432c:	7023      	strb	r3, [r4, #0]
   d432e:	d9bf      	bls.n	d42b0 <_Z9sendMorsev+0x9c>
}
   d4330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          dot(); dash(); dash(); dash(); dash(); space(); break;
   d4334:	f7ff ff24 	bl	d4180 <_Z3dotv>
   d4338:	e7ce      	b.n	d42d8 <_Z9sendMorsev+0xc4>
          dot(); dot(); dash(); dash(); dash(); space(); break;
   d433a:	f7ff ff21 	bl	d4180 <_Z3dotv>
   d433e:	f7ff ff1f 	bl	d4180 <_Z3dotv>
   d4342:	f7ff fee7 	bl	d4114 <_Z4dashv>
   d4346:	f7ff fee5 	bl	d4114 <_Z4dashv>
   d434a:	f7ff fee3 	bl	d4114 <_Z4dashv>
   d434e:	f7ff ff4b 	bl	d41e8 <_Z5spacev>
   d4352:	e7cb      	b.n	d42ec <_Z9sendMorsev+0xd8>
          dot(); dot(); dot(); dash(); dash(); space(); break;
   d4354:	f7ff ff14 	bl	d4180 <_Z3dotv>
   d4358:	f7ff ff12 	bl	d4180 <_Z3dotv>
   d435c:	f7ff ff10 	bl	d4180 <_Z3dotv>
   d4360:	f7ff fed8 	bl	d4114 <_Z4dashv>
   d4364:	f7ff fed6 	bl	d4114 <_Z4dashv>
   d4368:	f7ff ff3e 	bl	d41e8 <_Z5spacev>
   d436c:	e7be      	b.n	d42ec <_Z9sendMorsev+0xd8>
          dot(); dot(); dot(); dot(); dash(); space(); break;
   d436e:	f7ff ff07 	bl	d4180 <_Z3dotv>
   d4372:	f7ff ff05 	bl	d4180 <_Z3dotv>
   d4376:	f7ff ff03 	bl	d4180 <_Z3dotv>
   d437a:	f7ff ff01 	bl	d4180 <_Z3dotv>
   d437e:	f7ff fec9 	bl	d4114 <_Z4dashv>
   d4382:	f7ff ff31 	bl	d41e8 <_Z5spacev>
   d4386:	e7b1      	b.n	d42ec <_Z9sendMorsev+0xd8>
          dot(); dot(); dot(); dot(); dot(); space(); break;
   d4388:	f7ff fefa 	bl	d4180 <_Z3dotv>
          dash(); dot(); dot(); dot(); dot(); space(); break;
   d438c:	f7ff fef8 	bl	d4180 <_Z3dotv>
   d4390:	f7ff fef6 	bl	d4180 <_Z3dotv>
   d4394:	f7ff fef4 	bl	d4180 <_Z3dotv>
   d4398:	f7ff fef2 	bl	d4180 <_Z3dotv>
   d439c:	f7ff ff24 	bl	d41e8 <_Z5spacev>
   d43a0:	e7a4      	b.n	d42ec <_Z9sendMorsev+0xd8>
   d43a2:	f7ff feb7 	bl	d4114 <_Z4dashv>
   d43a6:	e7f1      	b.n	d438c <_Z9sendMorsev+0x178>
          dash(); dash(); dot(); dot(); dot(); space(); break;
   d43a8:	f7ff feb4 	bl	d4114 <_Z4dashv>
   d43ac:	f7ff feb2 	bl	d4114 <_Z4dashv>
   d43b0:	f7ff fee6 	bl	d4180 <_Z3dotv>
   d43b4:	f7ff fee4 	bl	d4180 <_Z3dotv>
   d43b8:	f7ff fee2 	bl	d4180 <_Z3dotv>
   d43bc:	f7ff ff14 	bl	d41e8 <_Z5spacev>
   d43c0:	e794      	b.n	d42ec <_Z9sendMorsev+0xd8>
          dash(); dash(); dash(); dot(); dot(); space(); break;
   d43c2:	f7ff fea7 	bl	d4114 <_Z4dashv>
   d43c6:	f7ff fea5 	bl	d4114 <_Z4dashv>
   d43ca:	f7ff fea3 	bl	d4114 <_Z4dashv>
   d43ce:	f7ff fed7 	bl	d4180 <_Z3dotv>
   d43d2:	f7ff fed5 	bl	d4180 <_Z3dotv>
   d43d6:	f7ff ff07 	bl	d41e8 <_Z5spacev>
   d43da:	e787      	b.n	d42ec <_Z9sendMorsev+0xd8>
          dash(); dash(); dash(); dash(); dot(); space(); break;
   d43dc:	f7ff fe9a 	bl	d4114 <_Z4dashv>
   d43e0:	f7ff fe98 	bl	d4114 <_Z4dashv>
   d43e4:	f7ff fe96 	bl	d4114 <_Z4dashv>
   d43e8:	f7ff fe94 	bl	d4114 <_Z4dashv>
   d43ec:	f7ff fec8 	bl	d4180 <_Z3dotv>
   d43f0:	f7ff fefa 	bl	d41e8 <_Z5spacev>
   d43f4:	e77a      	b.n	d42ec <_Z9sendMorsev+0xd8>
   d43f6:	bf00      	nop
   d43f8:	2003e58c 	.word	0x2003e58c
   d43fc:	2003e610 	.word	0x2003e610
   d4400:	2003e60c 	.word	0x2003e60c
   d4404:	000d585c 	.word	0x000d585c
   d4408:	2003e61c 	.word	0x2003e61c
   d440c:	2003e619 	.word	0x2003e619
   d4410:	000d5867 	.word	0x000d5867
   d4414:	2003e618 	.word	0x2003e618
   d4418:	2003e638 	.word	0x2003e638
   d441c:	2003e614 	.word	0x2003e614
   d4420:	000d586f 	.word	0x000d586f
   d4424:	000d5884 	.word	0x000d5884

000d4428 <loop>:
void loop() {
   d4428:	b508      	push	{r3, lr}
   d442a:	f000 faf5 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
  if(millis()-currentTime>10000){ //send morse code sequence every 10 seconds
   d442e:	4b16      	ldr	r3, [pc, #88]	; (d4488 <loop+0x60>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	1ac0      	subs	r0, r0, r3
   d4434:	f242 7310 	movw	r3, #10000	; 0x2710
   d4438:	4298      	cmp	r0, r3
   d443a:	d923      	bls.n	d4484 <loop+0x5c>
    soilRead=analogRead(soilPin);
   d443c:	4b13      	ldr	r3, [pc, #76]	; (d448c <loop+0x64>)
   d443e:	8818      	ldrh	r0, [r3, #0]
   d4440:	f001 f950 	bl	d56e4 <analogRead>
    soil[0]=soilRead/1000; //calculations for accessing individual characters from soil reading
   d4444:	4a12      	ldr	r2, [pc, #72]	; (d4490 <loop+0x68>)
    soilRead=analogRead(soilPin);
   d4446:	4b13      	ldr	r3, [pc, #76]	; (d4494 <loop+0x6c>)
    soil[1]=((soilRead-(soil[0]*1000))/100);
   d4448:	4913      	ldr	r1, [pc, #76]	; (d4498 <loop+0x70>)
    soilRead=analogRead(soilPin);
   d444a:	6018      	str	r0, [r3, #0]
    soil[0]=soilRead/1000; //calculations for accessing individual characters from soil reading
   d444c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4450:	fb90 f3f3 	sdiv	r3, r0, r3
   d4454:	7013      	strb	r3, [r2, #0]
    soil[1]=((soilRead-(soil[0]*1000))/100);
   d4456:	b2db      	uxtb	r3, r3
   d4458:	fb01 0003 	mla	r0, r1, r3, r0
    soil[2]=(soilRead-(soil[0]*1000)-(soil[1]*100))/10;
   d445c:	f06f 0163 	mvn.w	r1, #99	; 0x63
    soil[1]=((soilRead-(soil[0]*1000))/100);
   d4460:	2364      	movs	r3, #100	; 0x64
   d4462:	fb90 f3f3 	sdiv	r3, r0, r3
   d4466:	7053      	strb	r3, [r2, #1]
    soil[2]=(soilRead-(soil[0]*1000)-(soil[1]*100))/10;
   d4468:	b2db      	uxtb	r3, r3
   d446a:	fb01 0003 	mla	r0, r1, r3, r0
   d446e:	210a      	movs	r1, #10
   d4470:	fb90 f3f1 	sdiv	r3, r0, r1
    soil[3]=(soilRead-(soil[0]*1000)-(soil[1]*100))%10;
   d4474:	fb01 0013 	mls	r0, r1, r3, r0
    soil[2]=(soilRead-(soil[0]*1000)-(soil[1]*100))/10;
   d4478:	7093      	strb	r3, [r2, #2]
    soil[3]=(soilRead-(soil[0]*1000)-(soil[1]*100))%10;
   d447a:	70d0      	strb	r0, [r2, #3]
}
   d447c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendMorse();
   d4480:	f7ff bec8 	b.w	d4214 <_Z9sendMorsev>
}
   d4484:	bd08      	pop	{r3, pc}
   d4486:	bf00      	nop
   d4488:	2003e614 	.word	0x2003e614
   d448c:	2003e590 	.word	0x2003e590
   d4490:	2003e638 	.word	0x2003e638
   d4494:	2003e63c 	.word	0x2003e63c
   d4498:	fffffc18 	.word	0xfffffc18

000d449c <_GLOBAL__sub_I_SystemMode>:
   d449c:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d449e:	4c0f      	ldr	r4, [pc, #60]	; (d44dc <_GLOBAL__sub_I_SystemMode+0x40>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d44a0:	4d0f      	ldr	r5, [pc, #60]	; (d44e0 <_GLOBAL__sub_I_SystemMode+0x44>)
   d44a2:	2300      	movs	r3, #0
   d44a4:	6023      	str	r3, [r4, #0]
   d44a6:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d44a8:	71a3      	strb	r3, [r4, #6]
   d44aa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d44ae:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d44b0:	2002      	movs	r0, #2
   d44b2:	f000 fbb9 	bl	d4c28 <set_system_mode>
   d44b6:	462a      	mov	r2, r5
   d44b8:	490a      	ldr	r1, [pc, #40]	; (d44e4 <_GLOBAL__sub_I_SystemMode+0x48>)
   d44ba:	4620      	mov	r0, r4
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d44bc:	4c0a      	ldr	r4, [pc, #40]	; (d44e8 <_GLOBAL__sub_I_SystemMode+0x4c>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d44be:	f001 f969 	bl	d5794 <__aeabi_atexit>
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d44c2:	2302      	movs	r3, #2
   d44c4:	461a      	mov	r2, r3
   d44c6:	210c      	movs	r1, #12
   d44c8:	4620      	mov	r0, r4
   d44ca:	f000 f863 	bl	d4594 <_ZN17Adafruit_NeoPixelC1Ethh>
   d44ce:	462a      	mov	r2, r5
   d44d0:	4620      	mov	r0, r4
   d44d2:	4906      	ldr	r1, [pc, #24]	; (d44ec <_GLOBAL__sub_I_SystemMode+0x50>)
   d44d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
Adafruit_NeoPixel pixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d44d8:	f001 b95c 	b.w	d5794 <__aeabi_atexit>
   d44dc:	2003e600 	.word	0x2003e600
   d44e0:	2003e5fc 	.word	0x2003e5fc
   d44e4:	000d40ab 	.word	0x000d40ab
   d44e8:	2003e624 	.word	0x2003e624
   d44ec:	000d44f1 	.word	0x000d44f1

000d44f0 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d44f0:	b510      	push	{r4, lr}
   d44f2:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d44f4:	68c0      	ldr	r0, [r0, #12]
   d44f6:	b108      	cbz	r0, d44fc <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d44f8:	f000 fc12 	bl	d4d20 <free>
  if (begun) pinMode(pin, INPUT);
   d44fc:	7823      	ldrb	r3, [r4, #0]
   d44fe:	b11b      	cbz	r3, d4508 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4500:	79e0      	ldrb	r0, [r4, #7]
   d4502:	2100      	movs	r1, #0
   d4504:	f001 f8c4 	bl	d5690 <pinMode>
}
   d4508:	4620      	mov	r0, r4
   d450a:	bd10      	pop	{r4, pc}

000d450c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d450c:	b538      	push	{r3, r4, r5, lr}
   d450e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4510:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4512:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4514:	b108      	cbz	r0, d451a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4516:	f000 fc03 	bl	d4d20 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d451a:	79a3      	ldrb	r3, [r4, #6]
   d451c:	2b06      	cmp	r3, #6
   d451e:	bf0c      	ite	eq
   d4520:	2004      	moveq	r0, #4
   d4522:	2003      	movne	r0, #3
   d4524:	fb10 f005 	smulbb	r0, r0, r5
   d4528:	b280      	uxth	r0, r0
   d452a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d452c:	f000 fbf0 	bl	d4d10 <malloc>
   d4530:	60e0      	str	r0, [r4, #12]
   d4532:	b128      	cbz	r0, d4540 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4534:	88a2      	ldrh	r2, [r4, #4]
   d4536:	2100      	movs	r1, #0
   d4538:	f001 f952 	bl	d57e0 <memset>
    numLEDs = n;
   d453c:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   d453e:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   d4540:	80a0      	strh	r0, [r4, #4]
   d4542:	8060      	strh	r0, [r4, #2]
}
   d4544:	e7fb      	b.n	d453e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000d4546 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   d4546:	b510      	push	{r4, lr}
   d4548:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d454a:	2101      	movs	r1, #1
   d454c:	79c0      	ldrb	r0, [r0, #7]
   d454e:	f001 f89f 	bl	d5690 <pinMode>
  digitalWrite(pin, LOW);
   d4552:	79e0      	ldrb	r0, [r4, #7]
   d4554:	2100      	movs	r1, #0
   d4556:	f001 f8ac 	bl	d56b2 <digitalWrite>
  begun = true;
   d455a:	2301      	movs	r3, #1
   d455c:	7023      	strb	r3, [r4, #0]
}
   d455e:	bd10      	pop	{r4, pc}

000d4560 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4560:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   d4562:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4564:	4605      	mov	r5, r0
   d4566:	460c      	mov	r4, r1
    if (begun) {
   d4568:	b11b      	cbz	r3, d4572 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d456a:	79c0      	ldrb	r0, [r0, #7]
   d456c:	2100      	movs	r1, #0
   d456e:	f001 f88f 	bl	d5690 <pinMode>
    }
    pin = p;
    if (begun) {
   d4572:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   d4574:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4576:	b15b      	cbz	r3, d4590 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   d4578:	b2a0      	uxth	r0, r4
   d457a:	2101      	movs	r1, #1
   d457c:	9001      	str	r0, [sp, #4]
   d457e:	f001 f887 	bl	d5690 <pinMode>
        digitalWrite(p, LOW);
   d4582:	9801      	ldr	r0, [sp, #4]
   d4584:	2100      	movs	r1, #0
    }
}
   d4586:	b003      	add	sp, #12
   d4588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   d458c:	f001 b891 	b.w	d56b2 <digitalWrite>
}
   d4590:	b003      	add	sp, #12
   d4592:	bd30      	pop	{r4, r5, pc}

000d4594 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4594:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4596:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4598:	4604      	mov	r4, r0
   d459a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d459c:	7183      	strb	r3, [r0, #6]
   d459e:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d45a2:	7005      	strb	r5, [r0, #0]
   d45a4:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   d45a6:	f7ff ffb1 	bl	d450c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d45aa:	4620      	mov	r0, r4
   d45ac:	4631      	mov	r1, r6
   d45ae:	f7ff ffd7 	bl	d4560 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d45b2:	4620      	mov	r0, r4
   d45b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d45b8 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d45b8:	68c3      	ldr	r3, [r0, #12]
   d45ba:	2b00      	cmp	r3, #0
   d45bc:	f000 818d 	beq.w	d48da <_ZN17Adafruit_NeoPixel4showEv+0x322>
void Adafruit_NeoPixel::show(void) {
   d45c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45c4:	7983      	ldrb	r3, [r0, #6]
   d45c6:	3b02      	subs	r3, #2
   d45c8:	b2db      	uxtb	r3, r3
   d45ca:	2b04      	cmp	r3, #4
   d45cc:	bf9c      	itt	ls
   d45ce:	4ac8      	ldrls	r2, [pc, #800]	; (d48f0 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
   d45d0:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d45d4:	b087      	sub	sp, #28
   d45d6:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d45d8:	bf88      	it	hi
   d45da:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d45dc:	f000 fa14 	bl	d4a08 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d45e0:	692b      	ldr	r3, [r5, #16]
   d45e2:	1ac0      	subs	r0, r0, r3
   d45e4:	42a0      	cmp	r0, r4
   d45e6:	d3f9      	bcc.n	d45dc <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d45e8:	4ac2      	ldr	r2, [pc, #776]	; (d48f4 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d45ea:	88ab      	ldrh	r3, [r5, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d45ec:	ca07      	ldmia	r2, {r0, r1, r2}
   d45ee:	ac06      	add	r4, sp, #24
   d45f0:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d45f4:	9c03      	ldr	r4, [sp, #12]
   d45f6:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45fa:	b91a      	cbnz	r2, d4604 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45fc:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4600:	2a00      	cmp	r2, #0
   d4602:	db7c      	blt.n	d46fe <_ZN17Adafruit_NeoPixel4showEv+0x146>
   d4604:	9c04      	ldr	r4, [sp, #16]
   d4606:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d460a:	b922      	cbnz	r2, d4616 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d460c:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4610:	2a00      	cmp	r2, #0
   d4612:	f2c0 8152 	blt.w	d48ba <_ZN17Adafruit_NeoPixel4showEv+0x302>
   d4616:	9c05      	ldr	r4, [sp, #20]
   d4618:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d461c:	2a00      	cmp	r2, #0
   d461e:	f000 8137 	beq.w	d4890 <_ZN17Adafruit_NeoPixel4showEv+0x2d8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4622:	4bb5      	ldr	r3, [pc, #724]	; (d48f8 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4624:	48b5      	ldr	r0, [pc, #724]	; (d48fc <_ZN17Adafruit_NeoPixel4showEv+0x344>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4626:	681c      	ldr	r4, [r3, #0]
   d4628:	79eb      	ldrb	r3, [r5, #7]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d462a:	68c1      	ldr	r1, [r0, #12]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d462c:	011a      	lsls	r2, r3, #4
   d462e:	eb04 1603 	add.w	r6, r4, r3, lsl #4
   d4632:	5ca7      	ldrb	r7, [r4, r2]
   d4634:	7873      	ldrb	r3, [r6, #1]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4636:	4cb2      	ldr	r4, [pc, #712]	; (d4900 <_ZN17Adafruit_NeoPixel4showEv+0x348>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4638:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   d463c:	60c1      	str	r1, [r0, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d463e:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4640:	f003 031f 	and.w	r3, r3, #31
   d4644:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4648:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d464a:	433a      	orrs	r2, r7
   d464c:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d464e:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d4650:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d4654:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4658:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   d465a:	2900      	cmp	r1, #0
   d465c:	d044      	beq.n	d46e8 <_ZN17Adafruit_NeoPixel4showEv+0x130>
   d465e:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   d4662:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4664:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   d4668:	f818 cb01 	ldrb.w	ip, [r8], #1
   d466c:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d466e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4670:	6863      	ldr	r3, [r4, #4]
   d4672:	1a9b      	subs	r3, r3, r2
   d4674:	2b46      	cmp	r3, #70	; 0x46
   d4676:	d9fb      	bls.n	d4670 <_ZN17Adafruit_NeoPixel4showEv+0xb8>
          cyc  = DWT->CYCCNT;
   d4678:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   d467a:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d467e:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   d4682:	ea43 0307 	orr.w	r3, r3, r7
   d4686:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   d468a:	d02f      	beq.n	d46ec <_ZN17Adafruit_NeoPixel4showEv+0x134>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d468c:	6863      	ldr	r3, [r4, #4]
   d468e:	1a9b      	subs	r3, r3, r2
   d4690:	2b28      	cmp	r3, #40	; 0x28
   d4692:	d9fb      	bls.n	d468c <_ZN17Adafruit_NeoPixel4showEv+0xd4>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4694:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4698:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   d469a:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d469e:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   d46a2:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d46a6:	d1e3      	bne.n	d4670 <_ZN17Adafruit_NeoPixel4showEv+0xb8>
      for(uint16_t n=0; n<numBytes; n++) {
   d46a8:	88ab      	ldrh	r3, [r5, #4]
   d46aa:	f10e 0e01 	add.w	lr, lr, #1
   d46ae:	fa1f fe8e 	uxth.w	lr, lr
   d46b2:	4573      	cmp	r3, lr
   d46b4:	d8d8      	bhi.n	d4668 <_ZN17Adafruit_NeoPixel4showEv+0xb0>
   d46b6:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   d46ba:	fb01 f103 	mul.w	r1, r1, r3
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d46be:	6863      	ldr	r3, [r4, #4]
   d46c0:	1a9b      	subs	r3, r3, r2
   d46c2:	2b46      	cmp	r3, #70	; 0x46
   d46c4:	d9fb      	bls.n	d46be <_ZN17Adafruit_NeoPixel4showEv+0x106>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d46c6:	6863      	ldr	r3, [r4, #4]
   d46c8:	eba3 0909 	sub.w	r9, r3, r9
   d46cc:	4589      	cmp	r9, r1
   d46ce:	f0c0 80d9 	bcc.w	d4884 <_ZN17Adafruit_NeoPixel4showEv+0x2cc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d46d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d46d6:	f000 f98f 	bl	d49f8 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   d46da:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d46dc:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d46e0:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   d46e4:	2900      	cmp	r1, #0
   d46e6:	d1ba      	bne.n	d465e <_ZN17Adafruit_NeoPixel4showEv+0xa6>
      uint32_t cyc = 0;
   d46e8:	460a      	mov	r2, r1
   d46ea:	e7e8      	b.n	d46be <_ZN17Adafruit_NeoPixel4showEv+0x106>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d46ec:	6863      	ldr	r3, [r4, #4]
   d46ee:	1a9b      	subs	r3, r3, r2
   d46f0:	2b11      	cmp	r3, #17
   d46f2:	d8cf      	bhi.n	d4694 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
   d46f4:	6863      	ldr	r3, [r4, #4]
   d46f6:	1a9b      	subs	r3, r3, r2
   d46f8:	2b11      	cmp	r3, #17
   d46fa:	d9f7      	bls.n	d46ec <_ZN17Adafruit_NeoPixel4showEv+0x134>
   d46fc:	e7ca      	b.n	d4694 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46fe:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4702:	2a00      	cmp	r2, #0
   d4704:	f6bf af7e 	bge.w	d4604 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4708:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d470c:	2a00      	cmp	r2, #0
   d470e:	f6bf af79 	bge.w	d4604 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4712:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4716:	2a00      	cmp	r2, #0
   d4718:	f6bf af74 	bge.w	d4604 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d471c:	011b      	lsls	r3, r3, #4
   d471e:	3304      	adds	r3, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4720:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4722:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4724:	f000 faf4 	bl	d4d10 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4728:	2800      	cmp	r0, #0
   d472a:	f43f af7a 	beq.w	d4622 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
    for(uint16_t n=0; n<numBytes; n++) {
   d472e:	88ab      	ldrh	r3, [r5, #4]
   d4730:	2b00      	cmp	r3, #0
   d4732:	f000 80da 	beq.w	d48ea <_ZN17Adafruit_NeoPixel4showEv+0x332>
      uint8_t pix = pixels[n];
   d4736:	68ea      	ldr	r2, [r5, #12]
   d4738:	3b01      	subs	r3, #1
   d473a:	fa12 fe83 	uxtah	lr, r2, r3
   d473e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   d4742:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4744:	f248 0206 	movw	r2, #32774	; 0x8006
   d4748:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   d474c:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4750:	f017 0f80 	tst.w	r7, #128	; 0x80
   d4754:	bf0c      	ite	eq
   d4756:	4690      	moveq	r8, r2
   d4758:	4688      	movne	r8, r1
   d475a:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
        pos++;
   d475e:	f103 0801 	add.w	r8, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4762:	f017 0f40 	tst.w	r7, #64	; 0x40
        pos++;
   d4766:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d476a:	bf0c      	ite	eq
   d476c:	4693      	moveq	fp, r2
   d476e:	468b      	movne	fp, r1
   d4770:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   d4774:	f103 0802 	add.w	r8, r3, #2
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4778:	f017 0f20 	tst.w	r7, #32
        pos++;
   d477c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4780:	bf0c      	ite	eq
   d4782:	4692      	moveq	sl, r2
   d4784:	468a      	movne	sl, r1
   d4786:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
        pos++;
   d478a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d478e:	f017 0f10 	tst.w	r7, #16
        pos++;
   d4792:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4796:	bf0c      	ite	eq
   d4798:	4691      	moveq	r9, r2
   d479a:	4689      	movne	r9, r1
   d479c:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d47a0:	f103 0904 	add.w	r9, r3, #4
   d47a4:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47a8:	f017 0f08 	tst.w	r7, #8
        pos++;
   d47ac:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47b0:	bf0c      	ite	eq
   d47b2:	4692      	moveq	sl, r2
   d47b4:	468a      	movne	sl, r1
        pos++;
   d47b6:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47ba:	f017 0f04 	tst.w	r7, #4
   d47be:	f820 a019 	strh.w	sl, [r0, r9, lsl #1]
   d47c2:	bf0c      	ite	eq
   d47c4:	4691      	moveq	r9, r2
   d47c6:	4689      	movne	r9, r1
   d47c8:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d47cc:	f103 0806 	add.w	r8, r3, #6
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47d0:	f017 0f02 	tst.w	r7, #2
        pos++;
   d47d4:	fa1f f888 	uxth.w	r8, r8
   d47d8:	f103 0608 	add.w	r6, r3, #8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47dc:	bf0c      	ite	eq
   d47de:	4691      	moveq	r9, r2
   d47e0:	4689      	movne	r9, r1
        pos++;
   d47e2:	3307      	adds	r3, #7
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47e4:	07ff      	lsls	r7, r7, #31
   d47e6:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d47ea:	9601      	str	r6, [sp, #4]
   d47ec:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47ee:	d575      	bpl.n	d48dc <_ZN17Adafruit_NeoPixel4showEv+0x324>
    for(uint16_t n=0; n<numBytes; n++) {
   d47f0:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d47f2:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
        pos++;
   d47f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    for(uint16_t n=0; n<numBytes; n++) {
   d47fa:	d1a7      	bne.n	d474c <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d47fc:	1c59      	adds	r1, r3, #1
   d47fe:	3302      	adds	r3, #2
   d4800:	b289      	uxth	r1, r1
   d4802:	b29b      	uxth	r3, r3
   d4804:	0049      	lsls	r1, r1, #1
   d4806:	005b      	lsls	r3, r3, #1
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4808:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d480a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   d480e:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4810:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4812:	4939      	ldr	r1, [pc, #228]	; (d48f8 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4814:	52c7      	strh	r7, [r0, r3]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4816:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4818:	f04f 0c14 	mov.w	ip, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d481c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4820:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4824:	f8c4 c508 	str.w	ip, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4828:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   d482c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4830:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4834:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   d4838:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d483c:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4840:	79eb      	ldrb	r3, [r5, #7]
   d4842:	680e      	ldr	r6, [r1, #0]
   d4844:	eb06 1703 	add.w	r7, r6, r3, lsl #4
   d4848:	0119      	lsls	r1, r3, #4
   d484a:	787b      	ldrb	r3, [r7, #1]
   d484c:	5c71      	ldrb	r1, [r6, r1]
   d484e:	f003 031f 	and.w	r3, r3, #31
   d4852:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    pwm->ENABLE = 1;
   d4856:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4858:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   d485c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   d4860:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4864:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   d4866:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d486a:	2b00      	cmp	r3, #0
   d486c:	d0fb      	beq.n	d4866 <_ZN17Adafruit_NeoPixel4showEv+0x2ae>
    pwm->EVENTS_SEQEND[0] = 0;
   d486e:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   d4874:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   d4878:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d487c:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   d4880:	f000 fa4e 	bl	d4d20 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4884:	f000 f8c0 	bl	d4a08 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4888:	6128      	str	r0, [r5, #16]
}
   d488a:	b007      	add	sp, #28
   d488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4890:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4894:	2a00      	cmp	r2, #0
   d4896:	f6bf aec4 	bge.w	d4622 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d489a:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d489e:	2a00      	cmp	r2, #0
   d48a0:	f6bf aebf 	bge.w	d4622 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48a4:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48a8:	2a00      	cmp	r2, #0
   d48aa:	f6bf aeba 	bge.w	d4622 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d48ae:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48b2:	2a00      	cmp	r2, #0
   d48b4:	f6bf aeb5 	bge.w	d4622 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
   d48b8:	e730      	b.n	d471c <_ZN17Adafruit_NeoPixel4showEv+0x164>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48ba:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48be:	2a00      	cmp	r2, #0
   d48c0:	f6bf aea9 	bge.w	d4616 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48c4:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48c8:	2a00      	cmp	r2, #0
   d48ca:	f6bf aea4 	bge.w	d4616 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d48ce:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48d2:	2a00      	cmp	r2, #0
   d48d4:	f6bf ae9f 	bge.w	d4616 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
   d48d8:	e720      	b.n	d471c <_ZN17Adafruit_NeoPixel4showEv+0x164>
   d48da:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   d48dc:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d48de:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        pos++;
   d48e2:	b2b3      	uxth	r3, r6
    for(uint16_t n=0; n<numBytes; n++) {
   d48e4:	f47f af32 	bne.w	d474c <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d48e8:	e788      	b.n	d47fc <_ZN17Adafruit_NeoPixel4showEv+0x244>
   d48ea:	2304      	movs	r3, #4
   d48ec:	2102      	movs	r1, #2
   d48ee:	e78b      	b.n	d4808 <_ZN17Adafruit_NeoPixel4showEv+0x250>
   d48f0:	000d5898 	.word	0x000d5898
   d48f4:	000d588c 	.word	0x000d588c
   d48f8:	2003e640 	.word	0x2003e640
   d48fc:	e000edf0 	.word	0xe000edf0
   d4900:	e0001000 	.word	0xe0001000

000d4904 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4904:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
   d4906:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4908:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
   d490c:	428c      	cmp	r4, r1
   d490e:	d91b      	bls.n	d4948 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x44>
    if(brightness) { // See notes in setBrightness()
   d4910:	7a04      	ldrb	r4, [r0, #8]
   d4912:	b144      	cbz	r4, d4926 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d4914:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d4918:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d491c:	fb14 f405 	smulbb	r4, r4, r5
      r = (r * brightness) >> 8;
   d4920:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d4922:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d4924:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
   d4926:	68c6      	ldr	r6, [r0, #12]
   d4928:	7980      	ldrb	r0, [r0, #6]
   d492a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d492e:	3802      	subs	r0, #2
   d4930:	1874      	adds	r4, r6, r1
    switch(type) {
   d4932:	2806      	cmp	r0, #6
   d4934:	d810      	bhi.n	d4958 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x54>
   d4936:	e8df f000 	tbb	[pc, r0]
   d493a:	0f04      	.short	0x0f04
   d493c:	040f0408 	.word	0x040f0408
   d4940:	04          	.byte	0x04
   d4941:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4942:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d4944:	7062      	strb	r2, [r4, #1]
          *p = b;
   d4946:	70a5      	strb	r5, [r4, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
   d4948:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
   d494a:	2afe      	cmp	r2, #254	; 0xfe
   d494c:	bf28      	it	cs
   d494e:	22fe      	movcs	r2, #254	; 0xfe
   d4950:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d4952:	7065      	strb	r5, [r4, #1]
          *p = g;
   d4954:	70a3      	strb	r3, [r4, #2]
        } break;
   d4956:	e7f7      	b.n	d4948 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x44>
          *p++ = r;
   d4958:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d495a:	7063      	strb	r3, [r4, #1]
          *p = b;
   d495c:	70a5      	strb	r5, [r4, #2]
}
   d495e:	e7f3      	b.n	d4948 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x44>

000d4960 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d4960:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   d4962:	1c4a      	adds	r2, r1, #1
   d4964:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d4966:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d4968:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   d496a:	d01e      	beq.n	d49aa <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d496c:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d496e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   d4972:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4974:	d00c      	beq.n	d4990 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d4976:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d4978:	bf1f      	itttt	ne
   d497a:	0211      	lslne	r1, r2, #8
   d497c:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   d4980:	fbb1 f3f3 	udivne	r3, r1, r3
   d4984:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   d4986:	bf04      	itt	eq
   d4988:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d498c:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   d4990:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   d4992:	8886      	ldrh	r6, [r0, #4]
   d4994:	1b29      	subs	r1, r5, r4
   d4996:	b289      	uxth	r1, r1
   d4998:	428e      	cmp	r6, r1
   d499a:	d905      	bls.n	d49a8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   d499c:	7829      	ldrb	r1, [r5, #0]
   d499e:	4359      	muls	r1, r3
   d49a0:	1209      	asrs	r1, r1, #8
   d49a2:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   d49a6:	e7f4      	b.n	d4992 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   d49a8:	7202      	strb	r2, [r0, #8]
  }
}
   d49aa:	bd70      	pop	{r4, r5, r6, pc}

000d49ac <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d49ac:	8882      	ldrh	r2, [r0, #4]
   d49ae:	68c0      	ldr	r0, [r0, #12]
   d49b0:	2100      	movs	r1, #0
   d49b2:	f000 bf15 	b.w	d57e0 <memset>
	...

000d49b8 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d49b8:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d49ba:	f000 f835 	bl	d4a28 <HAL_Pin_Map>
   d49be:	4b01      	ldr	r3, [pc, #4]	; (d49c4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d49c0:	6018      	str	r0, [r3, #0]
}
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	2003e640 	.word	0x2003e640

000d49c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <os_mutex_recursive_create+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030248 	.word	0x00030248

000d49d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <os_mutex_recursive_destroy+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030248 	.word	0x00030248

000d49e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_RNG_GetRandomNumber+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	685b      	ldr	r3, [r3, #4]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030218 	.word	0x00030218

000d49f8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <HAL_Delay_Microseconds+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	68db      	ldr	r3, [r3, #12]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030218 	.word	0x00030218

000d4a08 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	691b      	ldr	r3, [r3, #16]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030218 	.word	0x00030218

000d4a18 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	695b      	ldr	r3, [r3, #20]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030218 	.word	0x00030218

000d4a28 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <HAL_Pin_Map+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	0003022c 	.word	0x0003022c

000d4a38 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <HAL_Validate_Pin_Function+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	685b      	ldr	r3, [r3, #4]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	0003022c 	.word	0x0003022c

000d4a48 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <HAL_Pin_Mode+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	689b      	ldr	r3, [r3, #8]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	0003022c 	.word	0x0003022c

000d4a58 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <HAL_Get_Pin_Mode+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	68db      	ldr	r3, [r3, #12]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	0003022c 	.word	0x0003022c

000d4a68 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <HAL_GPIO_Write+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	691b      	ldr	r3, [r3, #16]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	0003022c 	.word	0x0003022c

000d4a78 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <hal_adc_read+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003022c 	.word	0x0003022c

000d4a88 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <hal_i2c_write+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6a1b      	ldr	r3, [r3, #32]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030228 	.word	0x00030228

000d4a98 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <hal_i2c_available+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	00030228 	.word	0x00030228

000d4aa8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <hal_i2c_read+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	00030228 	.word	0x00030228

000d4ab8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <hal_i2c_peek+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	00030228 	.word	0x00030228

000d4ac8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <hal_i2c_flush+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	00030228 	.word	0x00030228

000d4ad8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <hal_i2c_is_enabled+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	00030228 	.word	0x00030228

000d4ae8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <hal_i2c_init+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	00030228 	.word	0x00030228

000d4af8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <inet_inet_ntop+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	695b      	ldr	r3, [r3, #20]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	00030264 	.word	0x00030264

000d4b08 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <netdb_freeaddrinfo+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	689b      	ldr	r3, [r3, #8]
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	00030268 	.word	0x00030268

000d4b18 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <netdb_getaddrinfo+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	68db      	ldr	r3, [r3, #12]
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	00030268 	.word	0x00030268

000d4b28 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <hal_spi_init+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	69db      	ldr	r3, [r3, #28]
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	00030230 	.word	0x00030230

000d4b38 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <hal_spi_is_enabled+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	6a1b      	ldr	r3, [r3, #32]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	00030230 	.word	0x00030230

000d4b48 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <hal_usart_init+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	681b      	ldr	r3, [r3, #0]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	0003023c 	.word	0x0003023c

000d4b58 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <hal_usart_write+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	68db      	ldr	r3, [r3, #12]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	0003023c 	.word	0x0003023c

000d4b68 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <hal_usart_available+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	691b      	ldr	r3, [r3, #16]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	0003023c 	.word	0x0003023c

000d4b78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <hal_usart_read+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	695b      	ldr	r3, [r3, #20]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	0003023c 	.word	0x0003023c

000d4b88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <hal_usart_peek+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	699b      	ldr	r3, [r3, #24]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	0003023c 	.word	0x0003023c

000d4b98 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <hal_usart_flush+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	69db      	ldr	r3, [r3, #28]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	0003023c 	.word	0x0003023c

000d4ba8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <hal_usart_is_enabled+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	6a1b      	ldr	r3, [r3, #32]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	0003023c 	.word	0x0003023c

000d4bb8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <hal_usart_available_data_for_write+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	0003023c 	.word	0x0003023c

000d4bc8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <HAL_USB_USART_Init+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	681b      	ldr	r3, [r3, #0]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	0003024c 	.word	0x0003024c

000d4bd8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <HAL_USB_USART_Available_Data+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	691b      	ldr	r3, [r3, #16]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	0003024c 	.word	0x0003024c

000d4be8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	695b      	ldr	r3, [r3, #20]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	0003024c 	.word	0x0003024c

000d4bf8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <HAL_USB_USART_Receive_Data+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	699b      	ldr	r3, [r3, #24]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	0003024c 	.word	0x0003024c

000d4c08 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <HAL_USB_USART_Send_Data+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	69db      	ldr	r3, [r3, #28]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	0003024c 	.word	0x0003024c

000d4c18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <HAL_USB_USART_Flush_Data+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	6a1b      	ldr	r3, [r3, #32]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	0003024c 	.word	0x0003024c

000d4c28 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <set_system_mode+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	685b      	ldr	r3, [r3, #4]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030220 	.word	0x00030220

000d4c38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b03      	ldr	r3, [pc, #12]	; (d4c48 <system_ctrl_set_app_request_handler+0x10>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c42:	9301      	str	r3, [sp, #4]
   d4c44:	bd08      	pop	{r3, pc}
   d4c46:	0000      	.short	0x0000
   d4c48:	00030220 	.word	0x00030220

000d4c4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b03      	ldr	r3, [pc, #12]	; (d4c5c <system_ctrl_set_result+0x10>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c56:	9301      	str	r3, [sp, #4]
   d4c58:	bd08      	pop	{r3, pc}
   d4c5a:	0000      	.short	0x0000
   d4c5c:	00030220 	.word	0x00030220

000d4c60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030244 	.word	0x00030244

000d4c70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <network_connect+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	685b      	ldr	r3, [r3, #4]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030240 	.word	0x00030240

000d4c80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <network_connecting+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	689b      	ldr	r3, [r3, #8]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030240 	.word	0x00030240

000d4c90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <network_disconnect+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	68db      	ldr	r3, [r3, #12]
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030240 	.word	0x00030240

000d4ca0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <network_ready+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	691b      	ldr	r3, [r3, #16]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030240 	.word	0x00030240

000d4cb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <network_on+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	695b      	ldr	r3, [r3, #20]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030240 	.word	0x00030240

000d4cc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <network_off+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	699b      	ldr	r3, [r3, #24]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030240 	.word	0x00030240

000d4cd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <network_listen+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	69db      	ldr	r3, [r3, #28]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030240 	.word	0x00030240

000d4ce0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <network_listening+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	6a1b      	ldr	r3, [r3, #32]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	00030240 	.word	0x00030240

000d4cf0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <network_set_listen_timeout+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	00030240 	.word	0x00030240

000d4d00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <network_get_listen_timeout+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030240 	.word	0x00030240

000d4d10 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <malloc+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	681b      	ldr	r3, [r3, #0]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	0003021c 	.word	0x0003021c

000d4d20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <free+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	685b      	ldr	r3, [r3, #4]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	0003021c 	.word	0x0003021c

000d4d30 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <vsnprintf+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	0003021c 	.word	0x0003021c

000d4d40 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <newlib_impure_ptr_callback+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	0003021c 	.word	0x0003021c

000d4d50 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d50:	b510      	push	{r4, lr}
   d4d52:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d54:	6800      	ldr	r0, [r0, #0]
   d4d56:	b108      	cbz	r0, d4d5c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d58:	f7ff fe3e 	bl	d49d8 <os_mutex_recursive_destroy>
    }
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	bd10      	pop	{r4, pc}

000d4d60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d60:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4d62:	4c06      	ldr	r4, [pc, #24]	; (d4d7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d64:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4d66:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4d68:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4d6a:	f7ff fe2d 	bl	d49c8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4d6e:	4620      	mov	r0, r4
   d4d70:	4a03      	ldr	r2, [pc, #12]	; (d4d80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d72:	4904      	ldr	r1, [pc, #16]	; (d4d84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4d78:	f000 bd0c 	b.w	d5794 <__aeabi_atexit>
   d4d7c:	2003e644 	.word	0x2003e644
   d4d80:	2003e5fc 	.word	0x2003e5fc
   d4d84:	000d4d51 	.word	0x000d4d51

000d4d88 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d88:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d8a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4d8c:	4604      	mov	r4, r0
      if (_M_manager)
   d4d8e:	b113      	cbz	r3, d4d96 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d90:	2203      	movs	r2, #3
   d4d92:	4601      	mov	r1, r0
   d4d94:	4798      	blx	r3
    }
   d4d96:	4620      	mov	r0, r4
   d4d98:	bd10      	pop	{r4, pc}

000d4d9a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d9a:	2200      	movs	r2, #0
   d4d9c:	6840      	ldr	r0, [r0, #4]
   d4d9e:	4611      	mov	r1, r2
   d4da0:	f7ff bf9e 	b.w	d4ce0 <network_listening>

000d4da4 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4da4:	2200      	movs	r2, #0
   d4da6:	6840      	ldr	r0, [r0, #4]
   d4da8:	4611      	mov	r1, r2
   d4daa:	f7ff bfa9 	b.w	d4d00 <network_get_listen_timeout>

000d4dae <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4dae:	6840      	ldr	r0, [r0, #4]
   d4db0:	2200      	movs	r2, #0
   d4db2:	f7ff bf9d 	b.w	d4cf0 <network_set_listen_timeout>

000d4db6 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4db6:	6840      	ldr	r0, [r0, #4]
   d4db8:	2200      	movs	r2, #0
   d4dba:	f081 0101 	eor.w	r1, r1, #1
   d4dbe:	f7ff bf87 	b.w	d4cd0 <network_listen>

000d4dc2 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4dc2:	2300      	movs	r3, #0
   d4dc4:	6840      	ldr	r0, [r0, #4]
   d4dc6:	461a      	mov	r2, r3
   d4dc8:	4619      	mov	r1, r3
   d4dca:	f7ff bf79 	b.w	d4cc0 <network_off>

000d4dce <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4dce:	2300      	movs	r3, #0
   d4dd0:	6840      	ldr	r0, [r0, #4]
   d4dd2:	461a      	mov	r2, r3
   d4dd4:	4619      	mov	r1, r3
   d4dd6:	f7ff bf6b 	b.w	d4cb0 <network_on>

000d4dda <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4dda:	2200      	movs	r2, #0
   d4ddc:	6840      	ldr	r0, [r0, #4]
   d4dde:	4611      	mov	r1, r2
   d4de0:	f7ff bf5e 	b.w	d4ca0 <network_ready>

000d4de4 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4de4:	2200      	movs	r2, #0
   d4de6:	6840      	ldr	r0, [r0, #4]
   d4de8:	4611      	mov	r1, r2
   d4dea:	f7ff bf49 	b.w	d4c80 <network_connecting>

000d4dee <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4dee:	6840      	ldr	r0, [r0, #4]
   d4df0:	2200      	movs	r2, #0
   d4df2:	2102      	movs	r1, #2
   d4df4:	f7ff bf4c 	b.w	d4c90 <network_disconnect>

000d4df8 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4df8:	2300      	movs	r3, #0
   d4dfa:	6840      	ldr	r0, [r0, #4]
   d4dfc:	461a      	mov	r2, r3
   d4dfe:	f7ff bf37 	b.w	d4c70 <network_connect>
	...

000d4e04 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e04:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e06:	2203      	movs	r2, #3
   d4e08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e0a:	4a02      	ldr	r2, [pc, #8]	; (d4e14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e0c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4e0e:	4770      	bx	lr
   d4e10:	2003e648 	.word	0x2003e648
   d4e14:	000d58b4 	.word	0x000d58b4

000d4e18 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4e18:	4770      	bx	lr

000d4e1a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e1c:	4606      	mov	r6, r0
   d4e1e:	4615      	mov	r5, r2
   d4e20:	460c      	mov	r4, r1
   d4e22:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e24:	42bc      	cmp	r4, r7
   d4e26:	d006      	beq.n	d4e36 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e28:	6833      	ldr	r3, [r6, #0]
   d4e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e2e:	689b      	ldr	r3, [r3, #8]
   d4e30:	4630      	mov	r0, r6
   d4e32:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4e34:	e7f6      	b.n	d4e24 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4e36:	4628      	mov	r0, r5
   d4e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e3a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4e3a:	7c00      	ldrb	r0, [r0, #16]
   d4e3c:	2200      	movs	r2, #0
   d4e3e:	f7ff be23 	b.w	d4a88 <hal_i2c_write>

000d4e42 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4e42:	7c00      	ldrb	r0, [r0, #16]
   d4e44:	2100      	movs	r1, #0
   d4e46:	f7ff be27 	b.w	d4a98 <hal_i2c_available>

000d4e4a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4e4a:	7c00      	ldrb	r0, [r0, #16]
   d4e4c:	2100      	movs	r1, #0
   d4e4e:	f7ff be2b 	b.w	d4aa8 <hal_i2c_read>

000d4e52 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4e52:	7c00      	ldrb	r0, [r0, #16]
   d4e54:	2100      	movs	r1, #0
   d4e56:	f7ff be2f 	b.w	d4ab8 <hal_i2c_peek>

000d4e5a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4e5a:	7c00      	ldrb	r0, [r0, #16]
   d4e5c:	2100      	movs	r1, #0
   d4e5e:	f7ff be33 	b.w	d4ac8 <hal_i2c_flush>

000d4e62 <_ZN7TwoWireD0Ev>:
   d4e62:	b510      	push	{r4, lr}
   d4e64:	2114      	movs	r1, #20
   d4e66:	4604      	mov	r4, r0
   d4e68:	f000 fc99 	bl	d579e <_ZdlPvj>
   d4e6c:	4620      	mov	r0, r4
   d4e6e:	bd10      	pop	{r4, pc}

000d4e70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4e70:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e76:	4604      	mov	r4, r0
   d4e78:	4608      	mov	r0, r1
   d4e7a:	2100      	movs	r1, #0
   d4e7c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4e80:	4b03      	ldr	r3, [pc, #12]	; (d4e90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4e82:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4e84:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4e86:	4611      	mov	r1, r2
   d4e88:	f7ff fe2e 	bl	d4ae8 <hal_i2c_init>
}
   d4e8c:	4620      	mov	r0, r4
   d4e8e:	bd10      	pop	{r4, pc}
   d4e90:	000d58e8 	.word	0x000d58e8

000d4e94 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e94:	4770      	bx	lr

000d4e96 <_ZN9IPAddressD0Ev>:
   d4e96:	b510      	push	{r4, lr}
   d4e98:	2118      	movs	r1, #24
   d4e9a:	4604      	mov	r4, r0
   d4e9c:	f000 fc7f 	bl	d579e <_ZdlPvj>
   d4ea0:	4620      	mov	r0, r4
   d4ea2:	bd10      	pop	{r4, pc}

000d4ea4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4ea6:	7d03      	ldrb	r3, [r0, #20]
   d4ea8:	2b06      	cmp	r3, #6
{
   d4eaa:	b08d      	sub	sp, #52	; 0x34
   d4eac:	460e      	mov	r6, r1
   d4eae:	f100 0704 	add.w	r7, r0, #4
   d4eb2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4eb6:	d012      	beq.n	d4ede <_ZNK9IPAddress7printToER5Print+0x3a>
   d4eb8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4ebc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4ec0:	220a      	movs	r2, #10
   d4ec2:	4630      	mov	r0, r6
   d4ec4:	f000 f93f 	bl	d5146 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ec8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4eca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4ecc:	d019      	beq.n	d4f02 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4ece:	2c00      	cmp	r4, #0
   d4ed0:	d0f4      	beq.n	d4ebc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4ed2:	212e      	movs	r1, #46	; 0x2e
   d4ed4:	4630      	mov	r0, r6
   d4ed6:	f000 f927 	bl	d5128 <_ZN5Print5printEc>
   d4eda:	4404      	add	r4, r0
   d4edc:	e7ee      	b.n	d4ebc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ede:	232f      	movs	r3, #47	; 0x2f
   d4ee0:	466a      	mov	r2, sp
   d4ee2:	4639      	mov	r1, r7
   d4ee4:	200a      	movs	r0, #10
		buf[0] = 0;
   d4ee6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4eea:	f7ff fe05 	bl	d4af8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4eee:	4668      	mov	r0, sp
   d4ef0:	f000 fca2 	bl	d5838 <strlen>
   d4ef4:	6833      	ldr	r3, [r6, #0]
   d4ef6:	4602      	mov	r2, r0
   d4ef8:	68db      	ldr	r3, [r3, #12]
   d4efa:	4669      	mov	r1, sp
   d4efc:	4630      	mov	r0, r6
   d4efe:	4798      	blx	r3
   d4f00:	4604      	mov	r4, r0
    }
    return n;
}
   d4f02:	4620      	mov	r0, r4
   d4f04:	b00d      	add	sp, #52	; 0x34
   d4f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f08 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4f08:	b510      	push	{r4, lr}
   d4f0a:	4b05      	ldr	r3, [pc, #20]	; (d4f20 <_ZN9IPAddressC1Ev+0x18>)
   d4f0c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4f0e:	2211      	movs	r2, #17
   d4f10:	f840 3b04 	str.w	r3, [r0], #4
   d4f14:	2100      	movs	r1, #0
   d4f16:	f000 fc63 	bl	d57e0 <memset>
}
   d4f1a:	4620      	mov	r0, r4
   d4f1c:	bd10      	pop	{r4, pc}
   d4f1e:	bf00      	nop
   d4f20:	000d5910 	.word	0x000d5910

000d4f24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4f24:	4603      	mov	r3, r0
   d4f26:	4a07      	ldr	r2, [pc, #28]	; (d4f44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4f28:	b510      	push	{r4, lr}
   d4f2a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4f2e:	f101 0210 	add.w	r2, r1, #16
   d4f32:	f851 4b04 	ldr.w	r4, [r1], #4
   d4f36:	f843 4b04 	str.w	r4, [r3], #4
   d4f3a:	4291      	cmp	r1, r2
   d4f3c:	d1f9      	bne.n	d4f32 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4f3e:	780a      	ldrb	r2, [r1, #0]
   d4f40:	701a      	strb	r2, [r3, #0]
}
   d4f42:	bd10      	pop	{r4, pc}
   d4f44:	000d5910 	.word	0x000d5910

000d4f48 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4f48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4f4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4f4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4f52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4f56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4f5a:	2304      	movs	r3, #4
   d4f5c:	6041      	str	r1, [r0, #4]
   d4f5e:	7503      	strb	r3, [r0, #20]
}
   d4f60:	bd10      	pop	{r4, pc}

000d4f62 <_ZN9IPAddressaSEPKh>:
{
   d4f62:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f64:	78cb      	ldrb	r3, [r1, #3]
   d4f66:	9300      	str	r3, [sp, #0]
   d4f68:	788b      	ldrb	r3, [r1, #2]
   d4f6a:	784a      	ldrb	r2, [r1, #1]
   d4f6c:	7809      	ldrb	r1, [r1, #0]
   d4f6e:	f7ff ffeb 	bl	d4f48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4f72:	b002      	add	sp, #8
   d4f74:	bd10      	pop	{r4, pc}
	...

000d4f78 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f78:	4b01      	ldr	r3, [pc, #4]	; (d4f80 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f7a:	4a02      	ldr	r2, [pc, #8]	; (d4f84 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f7c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f7e:	4770      	bx	lr
   d4f80:	2003e650 	.word	0x2003e650
   d4f84:	000d591c 	.word	0x000d591c

000d4f88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4f88:	2300      	movs	r3, #0
   d4f8a:	6840      	ldr	r0, [r0, #4]
   d4f8c:	461a      	mov	r2, r3
   d4f8e:	f7ff be6f 	b.w	d4c70 <network_connect>

000d4f92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4f92:	6840      	ldr	r0, [r0, #4]
   d4f94:	2200      	movs	r2, #0
   d4f96:	2102      	movs	r1, #2
   d4f98:	f7ff be7a 	b.w	d4c90 <network_disconnect>

000d4f9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4f9c:	2200      	movs	r2, #0
   d4f9e:	6840      	ldr	r0, [r0, #4]
   d4fa0:	4611      	mov	r1, r2
   d4fa2:	f7ff be6d 	b.w	d4c80 <network_connecting>

000d4fa6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4fa6:	2200      	movs	r2, #0
   d4fa8:	6840      	ldr	r0, [r0, #4]
   d4faa:	4611      	mov	r1, r2
   d4fac:	f7ff be78 	b.w	d4ca0 <network_ready>

000d4fb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fb0:	2300      	movs	r3, #0
   d4fb2:	6840      	ldr	r0, [r0, #4]
   d4fb4:	461a      	mov	r2, r3
   d4fb6:	4619      	mov	r1, r3
   d4fb8:	f7ff be7a 	b.w	d4cb0 <network_on>

000d4fbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4fbc:	2300      	movs	r3, #0
   d4fbe:	6840      	ldr	r0, [r0, #4]
   d4fc0:	461a      	mov	r2, r3
   d4fc2:	4619      	mov	r1, r3
   d4fc4:	f7ff be7c 	b.w	d4cc0 <network_off>

000d4fc8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4fc8:	6840      	ldr	r0, [r0, #4]
   d4fca:	2200      	movs	r2, #0
   d4fcc:	f081 0101 	eor.w	r1, r1, #1
   d4fd0:	f7ff be7e 	b.w	d4cd0 <network_listen>

000d4fd4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4fd4:	6840      	ldr	r0, [r0, #4]
   d4fd6:	2200      	movs	r2, #0
   d4fd8:	f7ff be8a 	b.w	d4cf0 <network_set_listen_timeout>

000d4fdc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4fdc:	2200      	movs	r2, #0
   d4fde:	6840      	ldr	r0, [r0, #4]
   d4fe0:	4611      	mov	r1, r2
   d4fe2:	f7ff be8d 	b.w	d4d00 <network_get_listen_timeout>

000d4fe6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4fe6:	2200      	movs	r2, #0
   d4fe8:	6840      	ldr	r0, [r0, #4]
   d4fea:	4611      	mov	r1, r2
   d4fec:	f7ff be78 	b.w	d4ce0 <network_listening>

000d4ff0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4ff4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4ff6:	b095      	sub	sp, #84	; 0x54
   d4ff8:	4616      	mov	r6, r2
   d4ffa:	460d      	mov	r5, r1
   d4ffc:	4607      	mov	r7, r0
    IPAddress addr;
   d4ffe:	f7ff ff83 	bl	d4f08 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5002:	4621      	mov	r1, r4
   d5004:	2218      	movs	r2, #24
   d5006:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5008:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d500a:	f000 fbe9 	bl	d57e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d500e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5010:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5014:	4621      	mov	r1, r4
   d5016:	466b      	mov	r3, sp
   d5018:	aa0c      	add	r2, sp, #48	; 0x30
   d501a:	4630      	mov	r0, r6
   d501c:	f7ff fd7c 	bl	d4b18 <netdb_getaddrinfo>
    if (!r) {
   d5020:	4604      	mov	r4, r0
   d5022:	2800      	cmp	r0, #0
   d5024:	d146      	bne.n	d50b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5026:	4602      	mov	r2, r0
   d5028:	2101      	movs	r1, #1
   d502a:	6868      	ldr	r0, [r5, #4]
   d502c:	f7ff fe38 	bl	d4ca0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5030:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5032:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5034:	4622      	mov	r2, r4
   d5036:	6868      	ldr	r0, [r5, #4]
   d5038:	f7ff fe32 	bl	d4ca0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d503c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d503e:	4681      	mov	r9, r0
        bool ok = false;
   d5040:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5042:	2e00      	cmp	r6, #0
   d5044:	d036      	beq.n	d50b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5046:	2900      	cmp	r1, #0
   d5048:	d134      	bne.n	d50b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d504a:	6873      	ldr	r3, [r6, #4]
   d504c:	2b02      	cmp	r3, #2
   d504e:	d003      	beq.n	d5058 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5050:	2b0a      	cmp	r3, #10
   d5052:	d00b      	beq.n	d506c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5054:	69f6      	ldr	r6, [r6, #28]
   d5056:	e7f4      	b.n	d5042 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5058:	f1b8 0f00 	cmp.w	r8, #0
   d505c:	d004      	beq.n	d5068 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d505e:	6971      	ldr	r1, [r6, #20]
   d5060:	4638      	mov	r0, r7
   d5062:	3104      	adds	r1, #4
   d5064:	f7ff ff7d 	bl	d4f62 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5068:	4641      	mov	r1, r8
   d506a:	e7f3      	b.n	d5054 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d506c:	f1b9 0f00 	cmp.w	r9, #0
   d5070:	d101      	bne.n	d5076 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5072:	4649      	mov	r1, r9
   d5074:	e7ee      	b.n	d5054 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5076:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5078:	2210      	movs	r2, #16
   d507a:	a801      	add	r0, sp, #4
   d507c:	f000 fbb0 	bl	d57e0 <memset>
                    a.v = 6;
   d5080:	2306      	movs	r3, #6
   d5082:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5086:	ad01      	add	r5, sp, #4
   d5088:	f104 0308 	add.w	r3, r4, #8
   d508c:	3418      	adds	r4, #24
   d508e:	6818      	ldr	r0, [r3, #0]
   d5090:	6859      	ldr	r1, [r3, #4]
   d5092:	462a      	mov	r2, r5
   d5094:	c203      	stmia	r2!, {r0, r1}
   d5096:	3308      	adds	r3, #8
   d5098:	42a3      	cmp	r3, r4
   d509a:	4615      	mov	r5, r2
   d509c:	d1f7      	bne.n	d508e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d509e:	a901      	add	r1, sp, #4
   d50a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d50a2:	ad07      	add	r5, sp, #28
   d50a4:	f7ff ff3e 	bl	d4f24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50aa:	1d3c      	adds	r4, r7, #4
   d50ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50ae:	682b      	ldr	r3, [r5, #0]
   d50b0:	7023      	strb	r3, [r4, #0]
   d50b2:	e7de      	b.n	d5072 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50b4:	9800      	ldr	r0, [sp, #0]
   d50b6:	f7ff fd27 	bl	d4b08 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50ba:	4638      	mov	r0, r7
   d50bc:	b015      	add	sp, #84	; 0x54
   d50be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d50c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50c4:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50c6:	4a03      	ldr	r2, [pc, #12]	; (d50d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50c8:	601a      	str	r2, [r3, #0]
   d50ca:	2200      	movs	r2, #0
   d50cc:	605a      	str	r2, [r3, #4]

} // spark
   d50ce:	4770      	bx	lr
   d50d0:	2003e654 	.word	0x2003e654
   d50d4:	000d5928 	.word	0x000d5928

000d50d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d50d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50da:	4606      	mov	r6, r0
   d50dc:	460d      	mov	r5, r1
  size_t n = 0;
   d50de:	188f      	adds	r7, r1, r2
   d50e0:	2400      	movs	r4, #0
  while (size--) {
   d50e2:	42bd      	cmp	r5, r7
   d50e4:	d00c      	beq.n	d5100 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d50e6:	6833      	ldr	r3, [r6, #0]
   d50e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d50ec:	689b      	ldr	r3, [r3, #8]
   d50ee:	4630      	mov	r0, r6
   d50f0:	4798      	blx	r3
     if (chunk>=0)
   d50f2:	1e03      	subs	r3, r0, #0
   d50f4:	db01      	blt.n	d50fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d50f6:	441c      	add	r4, r3
  while (size--) {
   d50f8:	e7f3      	b.n	d50e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d50fa:	2c00      	cmp	r4, #0
   d50fc:	bf08      	it	eq
   d50fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5100:	4620      	mov	r0, r4
   d5102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5104 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5104:	b513      	push	{r0, r1, r4, lr}
   d5106:	4604      	mov	r4, r0
    }
   d5108:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d510a:	b159      	cbz	r1, d5124 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d510c:	9101      	str	r1, [sp, #4]
   d510e:	f000 fb93 	bl	d5838 <strlen>
   d5112:	6823      	ldr	r3, [r4, #0]
   d5114:	9901      	ldr	r1, [sp, #4]
   d5116:	68db      	ldr	r3, [r3, #12]
   d5118:	4602      	mov	r2, r0
   d511a:	4620      	mov	r0, r4
    }
   d511c:	b002      	add	sp, #8
   d511e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5122:	4718      	bx	r3
    }
   d5124:	b002      	add	sp, #8
   d5126:	bd10      	pop	{r4, pc}

000d5128 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5128:	6803      	ldr	r3, [r0, #0]
   d512a:	689b      	ldr	r3, [r3, #8]
   d512c:	4718      	bx	r3

000d512e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d512e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5130:	210d      	movs	r1, #13
{
   d5132:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5134:	f7ff fff8 	bl	d5128 <_ZN5Print5printEc>
  n += print('\n');
   d5138:	210a      	movs	r1, #10
  size_t n = print('\r');
   d513a:	4604      	mov	r4, r0
  n += print('\n');
   d513c:	4628      	mov	r0, r5
   d513e:	f7ff fff3 	bl	d5128 <_ZN5Print5printEc>
  return n;
}
   d5142:	4420      	add	r0, r4
   d5144:	bd38      	pop	{r3, r4, r5, pc}

000d5146 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5146:	b530      	push	{r4, r5, lr}
   d5148:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d514a:	2300      	movs	r3, #0
   d514c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5150:	2a01      	cmp	r2, #1
   d5152:	bf98      	it	ls
   d5154:	220a      	movls	r2, #10
   d5156:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5158:	460d      	mov	r5, r1
   d515a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d515e:	fb01 5312 	mls	r3, r1, r2, r5
   d5162:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5166:	2b09      	cmp	r3, #9
   d5168:	bf94      	ite	ls
   d516a:	3330      	addls	r3, #48	; 0x30
   d516c:	3337      	addhi	r3, #55	; 0x37
   d516e:	b2db      	uxtb	r3, r3
  } while(n);
   d5170:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5172:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5176:	d9ef      	bls.n	d5158 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5178:	4621      	mov	r1, r4
   d517a:	f7ff ffc3 	bl	d5104 <_ZN5Print5writeEPKc>
}
   d517e:	b00b      	add	sp, #44	; 0x2c
   d5180:	bd30      	pop	{r4, r5, pc}

000d5182 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5186:	b086      	sub	sp, #24
   d5188:	af00      	add	r7, sp, #0
   d518a:	4605      	mov	r5, r0
   d518c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d518e:	1d38      	adds	r0, r7, #4
   d5190:	2114      	movs	r1, #20
{
   d5192:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5194:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5196:	f7ff fdcb 	bl	d4d30 <vsnprintf>

    if (n<bufsize)
   d519a:	2813      	cmp	r0, #19
   d519c:	d80e      	bhi.n	d51bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d519e:	1d39      	adds	r1, r7, #4
   d51a0:	4628      	mov	r0, r5
   d51a2:	f7ff ffaf 	bl	d5104 <_ZN5Print5writeEPKc>
   d51a6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d51a8:	b11e      	cbz	r6, d51b2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d51aa:	4628      	mov	r0, r5
   d51ac:	f7ff ffbf 	bl	d512e <_ZN5Print7printlnEv>
   d51b0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d51b2:	4620      	mov	r0, r4
   d51b4:	3718      	adds	r7, #24
   d51b6:	46bd      	mov	sp, r7
   d51b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d51bc:	f100 0308 	add.w	r3, r0, #8
   d51c0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d51c4:	46e8      	mov	r8, sp
        char bigger[n+1];
   d51c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d51ca:	4622      	mov	r2, r4
   d51cc:	1c41      	adds	r1, r0, #1
   d51ce:	683b      	ldr	r3, [r7, #0]
   d51d0:	4668      	mov	r0, sp
   d51d2:	f7ff fdad 	bl	d4d30 <vsnprintf>
  return write(str);
   d51d6:	4669      	mov	r1, sp
   d51d8:	4628      	mov	r0, r5
   d51da:	f7ff ff93 	bl	d5104 <_ZN5Print5writeEPKc>
   d51de:	4604      	mov	r4, r0
   d51e0:	46c5      	mov	sp, r8
   d51e2:	e7e1      	b.n	d51a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d51e4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d51e4:	b510      	push	{r4, lr}
   d51e6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51e8:	f7ff fdce 	bl	d4d88 <_ZNSt14_Function_baseD1Ev>
   d51ec:	4620      	mov	r0, r4
   d51ee:	bd10      	pop	{r4, pc}

000d51f0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d51f0:	4803      	ldr	r0, [pc, #12]	; (d5200 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d51f2:	4a04      	ldr	r2, [pc, #16]	; (d5204 <_GLOBAL__sub_I_RGB+0x14>)
   d51f4:	4904      	ldr	r1, [pc, #16]	; (d5208 <_GLOBAL__sub_I_RGB+0x18>)
   d51f6:	2300      	movs	r3, #0
   d51f8:	6083      	str	r3, [r0, #8]
   d51fa:	f000 bacb 	b.w	d5794 <__aeabi_atexit>
   d51fe:	bf00      	nop
   d5200:	2003e65c 	.word	0x2003e65c
   d5204:	2003e5fc 	.word	0x2003e5fc
   d5208:	000d51e5 	.word	0x000d51e5

000d520c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d520c:	b510      	push	{r4, lr}
   d520e:	4604      	mov	r4, r0
   d5210:	4608      	mov	r0, r1
{
    _spi = spi;
   d5212:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5214:	f7ff fc88 	bl	d4b28 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5218:	2300      	movs	r3, #0
   d521a:	6063      	str	r3, [r4, #4]
}
   d521c:	4620      	mov	r0, r4
   d521e:	bd10      	pop	{r4, pc}

000d5220 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5220:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5222:	4b09      	ldr	r3, [pc, #36]	; (d5248 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5224:	4c09      	ldr	r4, [pc, #36]	; (d524c <_GLOBAL__sub_I_System+0x2c>)
   d5226:	2202      	movs	r2, #2
   d5228:	2000      	movs	r0, #0
   d522a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d522c:	4b08      	ldr	r3, [pc, #32]	; (d5250 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d522e:	6020      	str	r0, [r4, #0]
   d5230:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5232:	71a0      	strb	r0, [r4, #6]
   d5234:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5236:	f7ff fcf7 	bl	d4c28 <set_system_mode>
SystemClass System;
   d523a:	4620      	mov	r0, r4
   d523c:	4a05      	ldr	r2, [pc, #20]	; (d5254 <_GLOBAL__sub_I_System+0x34>)
   d523e:	4906      	ldr	r1, [pc, #24]	; (d5258 <_GLOBAL__sub_I_System+0x38>)
   d5240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5244:	f000 baa6 	b.w	d5794 <__aeabi_atexit>
   d5248:	2003e678 	.word	0x2003e678
   d524c:	2003e66c 	.word	0x2003e66c
   d5250:	ffff0000 	.word	0xffff0000
   d5254:	2003e5fc 	.word	0x2003e5fc
   d5258:	000d40ab 	.word	0x000d40ab

000d525c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d525c:	4b02      	ldr	r3, [pc, #8]	; (d5268 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d525e:	681a      	ldr	r2, [r3, #0]
   d5260:	4b02      	ldr	r3, [pc, #8]	; (d526c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5262:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5264:	4770      	bx	lr
   d5266:	bf00      	nop
   d5268:	2003e594 	.word	0x2003e594
   d526c:	2003e67c 	.word	0x2003e67c

000d5270 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5270:	4770      	bx	lr

000d5272 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5272:	7441      	strb	r1, [r0, #17]
}
   d5274:	4770      	bx	lr

000d5276 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5276:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5278:	7c00      	ldrb	r0, [r0, #16]
   d527a:	f7ff fc9d 	bl	d4bb8 <hal_usart_available_data_for_write>
}
   d527e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5282:	bd08      	pop	{r3, pc}

000d5284 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5284:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5286:	7c00      	ldrb	r0, [r0, #16]
   d5288:	f7ff fc6e 	bl	d4b68 <hal_usart_available>
}
   d528c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5290:	bd08      	pop	{r3, pc}

000d5292 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5292:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5294:	7c00      	ldrb	r0, [r0, #16]
   d5296:	f7ff fc77 	bl	d4b88 <hal_usart_peek>
}
   d529a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d529e:	bd08      	pop	{r3, pc}

000d52a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d52a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d52a2:	7c00      	ldrb	r0, [r0, #16]
   d52a4:	f7ff fc68 	bl	d4b78 <hal_usart_read>
}
   d52a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52ac:	bd08      	pop	{r3, pc}

000d52ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d52ae:	7c00      	ldrb	r0, [r0, #16]
   d52b0:	f7ff bc72 	b.w	d4b98 <hal_usart_flush>

000d52b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d52b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52b6:	7c45      	ldrb	r5, [r0, #17]
{
   d52b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52ba:	b12d      	cbz	r5, d52c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d52bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d52be:	b003      	add	sp, #12
   d52c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d52c4:	f7ff bc48 	b.w	d4b58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52c8:	7c00      	ldrb	r0, [r0, #16]
   d52ca:	9101      	str	r1, [sp, #4]
   d52cc:	f7ff fc74 	bl	d4bb8 <hal_usart_available_data_for_write>
   d52d0:	2800      	cmp	r0, #0
   d52d2:	9901      	ldr	r1, [sp, #4]
   d52d4:	dcf2      	bgt.n	d52bc <_ZN11USARTSerial5writeEh+0x8>
}
   d52d6:	4628      	mov	r0, r5
   d52d8:	b003      	add	sp, #12
   d52da:	bd30      	pop	{r4, r5, pc}

000d52dc <_ZN11USARTSerialD0Ev>:
   d52dc:	b510      	push	{r4, lr}
   d52de:	2114      	movs	r1, #20
   d52e0:	4604      	mov	r4, r0
   d52e2:	f000 fa5c 	bl	d579e <_ZdlPvj>
   d52e6:	4620      	mov	r0, r4
   d52e8:	bd10      	pop	{r4, pc}
	...

000d52ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d52ec:	b510      	push	{r4, lr}
   d52ee:	f04f 0c00 	mov.w	ip, #0
   d52f2:	4604      	mov	r4, r0
   d52f4:	4608      	mov	r0, r1
   d52f6:	4611      	mov	r1, r2
   d52f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52fc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5300:	4a04      	ldr	r2, [pc, #16]	; (d5314 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5302:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5304:	2201      	movs	r2, #1
  _serial = serial;
   d5306:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5308:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d530a:	461a      	mov	r2, r3
   d530c:	f7ff fc1c 	bl	d4b48 <hal_usart_init>
}
   d5310:	4620      	mov	r0, r4
   d5312:	bd10      	pop	{r4, pc}
   d5314:	000d5978 	.word	0x000d5978

000d5318 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5318:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d531a:	4c0e      	ldr	r4, [pc, #56]	; (d5354 <_Z22__fetch_global_Serial1v+0x3c>)
   d531c:	7821      	ldrb	r1, [r4, #0]
   d531e:	f3bf 8f5b 	dmb	ish
   d5322:	f011 0101 	ands.w	r1, r1, #1
   d5326:	d112      	bne.n	d534e <_Z22__fetch_global_Serial1v+0x36>
   d5328:	4620      	mov	r0, r4
   d532a:	9101      	str	r1, [sp, #4]
   d532c:	f7fe feb5 	bl	d409a <__cxa_guard_acquire>
   d5330:	9901      	ldr	r1, [sp, #4]
   d5332:	b160      	cbz	r0, d534e <_Z22__fetch_global_Serial1v+0x36>
   d5334:	4a08      	ldr	r2, [pc, #32]	; (d5358 <_Z22__fetch_global_Serial1v+0x40>)
   d5336:	4b09      	ldr	r3, [pc, #36]	; (d535c <_Z22__fetch_global_Serial1v+0x44>)
   d5338:	4809      	ldr	r0, [pc, #36]	; (d5360 <_Z22__fetch_global_Serial1v+0x48>)
   d533a:	f7ff ffd7 	bl	d52ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d533e:	4620      	mov	r0, r4
   d5340:	f7fe feb0 	bl	d40a4 <__cxa_guard_release>
   d5344:	4a07      	ldr	r2, [pc, #28]	; (d5364 <_Z22__fetch_global_Serial1v+0x4c>)
   d5346:	4908      	ldr	r1, [pc, #32]	; (d5368 <_Z22__fetch_global_Serial1v+0x50>)
   d5348:	4805      	ldr	r0, [pc, #20]	; (d5360 <_Z22__fetch_global_Serial1v+0x48>)
   d534a:	f000 fa23 	bl	d5794 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d534e:	4804      	ldr	r0, [pc, #16]	; (d5360 <_Z22__fetch_global_Serial1v+0x48>)
   d5350:	b002      	add	sp, #8
   d5352:	bd10      	pop	{r4, pc}
   d5354:	2003e680 	.word	0x2003e680
   d5358:	2003e684 	.word	0x2003e684
   d535c:	2003e708 	.word	0x2003e708
   d5360:	2003e78c 	.word	0x2003e78c
   d5364:	2003e5fc 	.word	0x2003e5fc
   d5368:	000d5271 	.word	0x000d5271

000d536c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d536c:	7441      	strb	r1, [r0, #17]
}
   d536e:	4770      	bx	lr

000d5370 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5370:	4770      	bx	lr

000d5372 <_ZN9USBSerial4readEv>:
{
   d5372:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5374:	2100      	movs	r1, #0
   d5376:	7c00      	ldrb	r0, [r0, #16]
   d5378:	f7ff fc3e 	bl	d4bf8 <HAL_USB_USART_Receive_Data>
}
   d537c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5380:	bd08      	pop	{r3, pc}

000d5382 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5382:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5384:	2101      	movs	r1, #1
   d5386:	7c00      	ldrb	r0, [r0, #16]
   d5388:	f7ff fc36 	bl	d4bf8 <HAL_USB_USART_Receive_Data>
}
   d538c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5390:	bd08      	pop	{r3, pc}

000d5392 <_ZN9USBSerial17availableForWriteEv>:
{
   d5392:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5394:	7c00      	ldrb	r0, [r0, #16]
   d5396:	f7ff fc27 	bl	d4be8 <HAL_USB_USART_Available_Data_For_Write>
}
   d539a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d539e:	bd08      	pop	{r3, pc}

000d53a0 <_ZN9USBSerial9availableEv>:
{
   d53a0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d53a2:	7c00      	ldrb	r0, [r0, #16]
   d53a4:	f7ff fc18 	bl	d4bd8 <HAL_USB_USART_Available_Data>
}
   d53a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d53ac:	bd08      	pop	{r3, pc}

000d53ae <_ZN9USBSerial5writeEh>:
{
   d53ae:	b513      	push	{r0, r1, r4, lr}
   d53b0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d53b2:	7c00      	ldrb	r0, [r0, #16]
{
   d53b4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d53b6:	f7ff fc17 	bl	d4be8 <HAL_USB_USART_Available_Data_For_Write>
   d53ba:	2800      	cmp	r0, #0
   d53bc:	9901      	ldr	r1, [sp, #4]
   d53be:	dc01      	bgt.n	d53c4 <_ZN9USBSerial5writeEh+0x16>
   d53c0:	7c60      	ldrb	r0, [r4, #17]
   d53c2:	b120      	cbz	r0, d53ce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d53c4:	7c20      	ldrb	r0, [r4, #16]
   d53c6:	f7ff fc1f 	bl	d4c08 <HAL_USB_USART_Send_Data>
   d53ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d53ce:	b002      	add	sp, #8
   d53d0:	bd10      	pop	{r4, pc}

000d53d2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d53d2:	7c00      	ldrb	r0, [r0, #16]
   d53d4:	f7ff bc20 	b.w	d4c18 <HAL_USB_USART_Flush_Data>

000d53d8 <_ZN9USBSerialD0Ev>:
   d53d8:	b510      	push	{r4, lr}
   d53da:	2114      	movs	r1, #20
   d53dc:	4604      	mov	r4, r0
   d53de:	f000 f9de 	bl	d579e <_ZdlPvj>
   d53e2:	4620      	mov	r0, r4
   d53e4:	bd10      	pop	{r4, pc}
	...

000d53e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d53e8:	b510      	push	{r4, lr}
   d53ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53ee:	4604      	mov	r4, r0
   d53f0:	4608      	mov	r0, r1
   d53f2:	2100      	movs	r1, #0
   d53f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d53f8:	4b04      	ldr	r3, [pc, #16]	; (d540c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d53fa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d53fc:	2301      	movs	r3, #1
  _serial = serial;
   d53fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5400:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5402:	4611      	mov	r1, r2
   d5404:	f7ff fbe0 	bl	d4bc8 <HAL_USB_USART_Init>
}
   d5408:	4620      	mov	r0, r4
   d540a:	bd10      	pop	{r4, pc}
   d540c:	000d59a8 	.word	0x000d59a8

000d5410 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5410:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5412:	2214      	movs	r2, #20
{
   d5414:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5416:	2100      	movs	r1, #0
   d5418:	f000 f9e2 	bl	d57e0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d541c:	4620      	mov	r0, r4
   d541e:	bd10      	pop	{r4, pc}

000d5420 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5420:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5422:	4c10      	ldr	r4, [pc, #64]	; (d5464 <_Z16_fetch_usbserialv+0x44>)
{
   d5424:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5426:	a803      	add	r0, sp, #12
   d5428:	f7ff fff2 	bl	d5410 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d542c:	7821      	ldrb	r1, [r4, #0]
   d542e:	f3bf 8f5b 	dmb	ish
   d5432:	f011 0101 	ands.w	r1, r1, #1
   d5436:	d111      	bne.n	d545c <_Z16_fetch_usbserialv+0x3c>
   d5438:	4620      	mov	r0, r4
   d543a:	9101      	str	r1, [sp, #4]
   d543c:	f7fe fe2d 	bl	d409a <__cxa_guard_acquire>
   d5440:	9901      	ldr	r1, [sp, #4]
   d5442:	b158      	cbz	r0, d545c <_Z16_fetch_usbserialv+0x3c>
   d5444:	aa03      	add	r2, sp, #12
   d5446:	4808      	ldr	r0, [pc, #32]	; (d5468 <_Z16_fetch_usbserialv+0x48>)
   d5448:	f7ff ffce 	bl	d53e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d544c:	4620      	mov	r0, r4
   d544e:	f7fe fe29 	bl	d40a4 <__cxa_guard_release>
   d5452:	4a06      	ldr	r2, [pc, #24]	; (d546c <_Z16_fetch_usbserialv+0x4c>)
   d5454:	4906      	ldr	r1, [pc, #24]	; (d5470 <_Z16_fetch_usbserialv+0x50>)
   d5456:	4804      	ldr	r0, [pc, #16]	; (d5468 <_Z16_fetch_usbserialv+0x48>)
   d5458:	f000 f99c 	bl	d5794 <__aeabi_atexit>
	return _usbserial;
}
   d545c:	4802      	ldr	r0, [pc, #8]	; (d5468 <_Z16_fetch_usbserialv+0x48>)
   d545e:	b008      	add	sp, #32
   d5460:	bd10      	pop	{r4, pc}
   d5462:	bf00      	nop
   d5464:	2003e7a0 	.word	0x2003e7a0
   d5468:	2003e7a4 	.word	0x2003e7a4
   d546c:	2003e5fc 	.word	0x2003e5fc
   d5470:	000d5371 	.word	0x000d5371

000d5474 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5474:	2200      	movs	r2, #0
   d5476:	6840      	ldr	r0, [r0, #4]
   d5478:	4611      	mov	r1, r2
   d547a:	f7ff bc11 	b.w	d4ca0 <network_ready>

000d547e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d547e:	2200      	movs	r2, #0
   d5480:	6840      	ldr	r0, [r0, #4]
   d5482:	4611      	mov	r1, r2
   d5484:	f7ff bc2c 	b.w	d4ce0 <network_listening>

000d5488 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5488:	2200      	movs	r2, #0
   d548a:	6840      	ldr	r0, [r0, #4]
   d548c:	4611      	mov	r1, r2
   d548e:	f7ff bc37 	b.w	d4d00 <network_get_listen_timeout>

000d5492 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5492:	6840      	ldr	r0, [r0, #4]
   d5494:	2200      	movs	r2, #0
   d5496:	f7ff bc2b 	b.w	d4cf0 <network_set_listen_timeout>

000d549a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d549a:	6840      	ldr	r0, [r0, #4]
   d549c:	2200      	movs	r2, #0
   d549e:	f081 0101 	eor.w	r1, r1, #1
   d54a2:	f7ff bc15 	b.w	d4cd0 <network_listen>

000d54a6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d54a6:	2300      	movs	r3, #0
   d54a8:	6840      	ldr	r0, [r0, #4]
   d54aa:	461a      	mov	r2, r3
   d54ac:	4619      	mov	r1, r3
   d54ae:	f7ff bc07 	b.w	d4cc0 <network_off>

000d54b2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d54b2:	2300      	movs	r3, #0
   d54b4:	6840      	ldr	r0, [r0, #4]
   d54b6:	461a      	mov	r2, r3
   d54b8:	4619      	mov	r1, r3
   d54ba:	f7ff bbf9 	b.w	d4cb0 <network_on>

000d54be <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d54be:	2200      	movs	r2, #0
   d54c0:	6840      	ldr	r0, [r0, #4]
   d54c2:	4611      	mov	r1, r2
   d54c4:	f7ff bbdc 	b.w	d4c80 <network_connecting>

000d54c8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54c8:	6840      	ldr	r0, [r0, #4]
   d54ca:	2200      	movs	r2, #0
   d54cc:	2102      	movs	r1, #2
   d54ce:	f7ff bbdf 	b.w	d4c90 <network_disconnect>

000d54d2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d54d2:	2300      	movs	r3, #0
   d54d4:	6840      	ldr	r0, [r0, #4]
   d54d6:	461a      	mov	r2, r3
   d54d8:	f7ff bbca 	b.w	d4c70 <network_connect>

000d54dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d54dc:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d54de:	2204      	movs	r2, #4
   d54e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d54e2:	4a02      	ldr	r2, [pc, #8]	; (d54ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d54e4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d54e6:	4770      	bx	lr
   d54e8:	2003e7b8 	.word	0x2003e7b8
   d54ec:	000d59d8 	.word	0x000d59d8

000d54f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d54f0:	4b01      	ldr	r3, [pc, #4]	; (d54f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d54f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d54f4:	4770      	bx	lr
   d54f6:	bf00      	nop
   d54f8:	2003e598 	.word	0x2003e598

000d54fc <serialEventRun>:
{
   d54fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d54fe:	4b0b      	ldr	r3, [pc, #44]	; (d552c <serialEventRun+0x30>)
   d5500:	b143      	cbz	r3, d5514 <serialEventRun+0x18>
   d5502:	f7ff ff8d 	bl	d5420 <_Z16_fetch_usbserialv>
   d5506:	6803      	ldr	r3, [r0, #0]
   d5508:	691b      	ldr	r3, [r3, #16]
   d550a:	4798      	blx	r3
   d550c:	2800      	cmp	r0, #0
   d550e:	dd01      	ble.n	d5514 <serialEventRun+0x18>
        serialEvent();
   d5510:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5514:	4b06      	ldr	r3, [pc, #24]	; (d5530 <serialEventRun+0x34>)
   d5516:	b143      	cbz	r3, d552a <serialEventRun+0x2e>
   d5518:	f7ff fefe 	bl	d5318 <_Z22__fetch_global_Serial1v>
   d551c:	6803      	ldr	r3, [r0, #0]
   d551e:	691b      	ldr	r3, [r3, #16]
   d5520:	4798      	blx	r3
   d5522:	2800      	cmp	r0, #0
   d5524:	dd01      	ble.n	d552a <serialEventRun+0x2e>
        serialEvent1();
   d5526:	f3af 8000 	nop.w
}
   d552a:	bd08      	pop	{r3, pc}
	...

000d5534 <_post_loop>:
{
   d5534:	b508      	push	{r3, lr}
	serialEventRun();
   d5536:	f7ff ffe1 	bl	d54fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d553a:	f7ff fa6d 	bl	d4a18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d553e:	4b01      	ldr	r3, [pc, #4]	; (d5544 <_post_loop+0x10>)
   d5540:	6018      	str	r0, [r3, #0]
}
   d5542:	bd08      	pop	{r3, pc}
   d5544:	2003e7d4 	.word	0x2003e7d4

000d5548 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5548:	4802      	ldr	r0, [pc, #8]	; (d5554 <_Z33system_initialize_user_backup_ramv+0xc>)
   d554a:	4a03      	ldr	r2, [pc, #12]	; (d5558 <_Z33system_initialize_user_backup_ramv+0x10>)
   d554c:	4903      	ldr	r1, [pc, #12]	; (d555c <_Z33system_initialize_user_backup_ramv+0x14>)
   d554e:	1a12      	subs	r2, r2, r0
   d5550:	f000 b938 	b.w	d57c4 <memcpy>
   d5554:	2003f400 	.word	0x2003f400
   d5558:	2003f404 	.word	0x2003f404
   d555c:	000d5a30 	.word	0x000d5a30

000d5560 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5560:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5562:	2300      	movs	r3, #0
   d5564:	9300      	str	r3, [sp, #0]
   d5566:	461a      	mov	r2, r3
   d5568:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d556c:	f7ff fb6e 	bl	d4c4c <system_ctrl_set_result>
}
   d5570:	b003      	add	sp, #12
   d5572:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5578 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5578:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d557a:	8843      	ldrh	r3, [r0, #2]
   d557c:	2b0a      	cmp	r3, #10
   d557e:	d008      	beq.n	d5592 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5580:	2b50      	cmp	r3, #80	; 0x50
   d5582:	d10b      	bne.n	d559c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5584:	4b09      	ldr	r3, [pc, #36]	; (d55ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5586:	681b      	ldr	r3, [r3, #0]
   d5588:	b14b      	cbz	r3, d559e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d558a:	b003      	add	sp, #12
   d558c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5590:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5592:	f7ff ffe5 	bl	d5560 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5596:	b003      	add	sp, #12
   d5598:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d559c:	2300      	movs	r3, #0
   d559e:	9300      	str	r3, [sp, #0]
   d55a0:	461a      	mov	r2, r3
   d55a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55a6:	f7ff fb51 	bl	d4c4c <system_ctrl_set_result>
}
   d55aa:	e7f4      	b.n	d5596 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d55ac:	2003e7c4 	.word	0x2003e7c4

000d55b0 <module_user_init_hook>:
{
   d55b0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d55b2:	4c12      	ldr	r4, [pc, #72]	; (d55fc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d55b4:	4812      	ldr	r0, [pc, #72]	; (d5600 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d55b6:	4d13      	ldr	r5, [pc, #76]	; (d5604 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d55b8:	2100      	movs	r1, #0
   d55ba:	f7ff fbc1 	bl	d4d40 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d55be:	6823      	ldr	r3, [r4, #0]
   d55c0:	42ab      	cmp	r3, r5
   d55c2:	4b11      	ldr	r3, [pc, #68]	; (d5608 <module_user_init_hook+0x58>)
   d55c4:	bf0c      	ite	eq
   d55c6:	2201      	moveq	r2, #1
   d55c8:	2200      	movne	r2, #0
   d55ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d55cc:	d002      	beq.n	d55d4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d55ce:	f7ff ffbb 	bl	d5548 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d55d2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d55d4:	f7ff fa08 	bl	d49e8 <HAL_RNG_GetRandomNumber>
   d55d8:	4604      	mov	r4, r0
    srand(seed);
   d55da:	f000 f909 	bl	d57f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d55de:	4b0b      	ldr	r3, [pc, #44]	; (d560c <module_user_init_hook+0x5c>)
   d55e0:	b113      	cbz	r3, d55e8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d55e2:	4620      	mov	r0, r4
   d55e4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d55e8:	2100      	movs	r1, #0
   d55ea:	4808      	ldr	r0, [pc, #32]	; (d560c <module_user_init_hook+0x5c>)
   d55ec:	f7ff fb38 	bl	d4c60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d55f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d55f4:	4806      	ldr	r0, [pc, #24]	; (d5610 <module_user_init_hook+0x60>)
   d55f6:	2100      	movs	r1, #0
   d55f8:	f7ff bb1e 	b.w	d4c38 <system_ctrl_set_app_request_handler>
   d55fc:	2003f400 	.word	0x2003f400
   d5600:	000d54f1 	.word	0x000d54f1
   d5604:	9a271c1e 	.word	0x9a271c1e
   d5608:	2003e7c0 	.word	0x2003e7c0
   d560c:	00000000 	.word	0x00000000
   d5610:	000d5579 	.word	0x000d5579

000d5614 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5614:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5616:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5618:	d902      	bls.n	d5620 <pinAvailable+0xc>
    return false;
   d561a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d561c:	b002      	add	sp, #8
   d561e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5620:	f1a0 030b 	sub.w	r3, r0, #11
   d5624:	2b02      	cmp	r3, #2
   d5626:	d81a      	bhi.n	d565e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5628:	4c17      	ldr	r4, [pc, #92]	; (d5688 <pinAvailable+0x74>)
   d562a:	7821      	ldrb	r1, [r4, #0]
   d562c:	f3bf 8f5b 	dmb	ish
   d5630:	f011 0101 	ands.w	r1, r1, #1
   d5634:	d10b      	bne.n	d564e <pinAvailable+0x3a>
   d5636:	4620      	mov	r0, r4
   d5638:	9101      	str	r1, [sp, #4]
   d563a:	f7fe fd2e 	bl	d409a <__cxa_guard_acquire>
   d563e:	9901      	ldr	r1, [sp, #4]
   d5640:	b128      	cbz	r0, d564e <pinAvailable+0x3a>
   d5642:	4812      	ldr	r0, [pc, #72]	; (d568c <pinAvailable+0x78>)
   d5644:	f7ff fde2 	bl	d520c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5648:	4620      	mov	r0, r4
   d564a:	f7fe fd2b 	bl	d40a4 <__cxa_guard_release>
   d564e:	4b0f      	ldr	r3, [pc, #60]	; (d568c <pinAvailable+0x78>)
   d5650:	7818      	ldrb	r0, [r3, #0]
   d5652:	f7ff fa71 	bl	d4b38 <hal_spi_is_enabled>
   d5656:	2800      	cmp	r0, #0
   d5658:	d1df      	bne.n	d561a <pinAvailable+0x6>
  return true; // 'pin' is available
   d565a:	2001      	movs	r0, #1
   d565c:	e7de      	b.n	d561c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d565e:	2801      	cmp	r0, #1
   d5660:	d809      	bhi.n	d5676 <pinAvailable+0x62>
   d5662:	f000 f86f 	bl	d5744 <_Z19__fetch_global_Wirev>
   d5666:	2100      	movs	r1, #0
   d5668:	7c00      	ldrb	r0, [r0, #16]
   d566a:	f7ff fa35 	bl	d4ad8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d566e:	f080 0001 	eor.w	r0, r0, #1
   d5672:	b2c0      	uxtb	r0, r0
   d5674:	e7d2      	b.n	d561c <pinAvailable+0x8>
   d5676:	3809      	subs	r0, #9
   d5678:	2801      	cmp	r0, #1
   d567a:	d8ee      	bhi.n	d565a <pinAvailable+0x46>
   d567c:	f7ff fe4c 	bl	d5318 <_Z22__fetch_global_Serial1v>
   d5680:	7c00      	ldrb	r0, [r0, #16]
   d5682:	f7ff fa91 	bl	d4ba8 <hal_usart_is_enabled>
   d5686:	e7f2      	b.n	d566e <pinAvailable+0x5a>
   d5688:	2003e7c8 	.word	0x2003e7c8
   d568c:	2003e7cc 	.word	0x2003e7cc

000d5690 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5690:	2823      	cmp	r0, #35	; 0x23
{
   d5692:	b538      	push	{r3, r4, r5, lr}
   d5694:	4604      	mov	r4, r0
   d5696:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5698:	d80a      	bhi.n	d56b0 <pinMode+0x20>
   d569a:	29ff      	cmp	r1, #255	; 0xff
   d569c:	d008      	beq.n	d56b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d569e:	f7ff ffb9 	bl	d5614 <pinAvailable>
   d56a2:	b128      	cbz	r0, d56b0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d56a4:	4629      	mov	r1, r5
   d56a6:	4620      	mov	r0, r4
}
   d56a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d56ac:	f7ff b9cc 	b.w	d4a48 <HAL_Pin_Mode>
}
   d56b0:	bd38      	pop	{r3, r4, r5, pc}

000d56b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d56b2:	b538      	push	{r3, r4, r5, lr}
   d56b4:	4604      	mov	r4, r0
   d56b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d56b8:	f7ff f9ce 	bl	d4a58 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d56bc:	28ff      	cmp	r0, #255	; 0xff
   d56be:	d010      	beq.n	d56e2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d56c0:	2806      	cmp	r0, #6
   d56c2:	d804      	bhi.n	d56ce <digitalWrite+0x1c>
   d56c4:	234d      	movs	r3, #77	; 0x4d
   d56c6:	fa23 f000 	lsr.w	r0, r3, r0
   d56ca:	07c3      	lsls	r3, r0, #31
   d56cc:	d409      	bmi.n	d56e2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d56ce:	4620      	mov	r0, r4
   d56d0:	f7ff ffa0 	bl	d5614 <pinAvailable>
   d56d4:	b128      	cbz	r0, d56e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56d6:	4629      	mov	r1, r5
   d56d8:	4620      	mov	r0, r4
}
   d56da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d56de:	f7ff b9c3 	b.w	d4a68 <HAL_GPIO_Write>
}
   d56e2:	bd38      	pop	{r3, r4, r5, pc}

000d56e4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d56e4:	280d      	cmp	r0, #13
{
   d56e6:	b510      	push	{r4, lr}
   d56e8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d56ea:	bf9c      	itt	ls
   d56ec:	340e      	addls	r4, #14
   d56ee:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d56f0:	4620      	mov	r0, r4
   d56f2:	f7ff ff8f 	bl	d5614 <pinAvailable>
   d56f6:	b150      	cbz	r0, d570e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d56f8:	2103      	movs	r1, #3
   d56fa:	4620      	mov	r0, r4
   d56fc:	f7ff f99c 	bl	d4a38 <HAL_Validate_Pin_Function>
   d5700:	2803      	cmp	r0, #3
   d5702:	d104      	bne.n	d570e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d5704:	4620      	mov	r0, r4
}
   d5706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d570a:	f7ff b9b5 	b.w	d4a78 <hal_adc_read>
}
   d570e:	2000      	movs	r0, #0
   d5710:	bd10      	pop	{r4, pc}
	...

000d5714 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5714:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5716:	2300      	movs	r3, #0
   d5718:	2520      	movs	r5, #32
   d571a:	8043      	strh	r3, [r0, #2]
   d571c:	2314      	movs	r3, #20
{
   d571e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5720:	8003      	strh	r3, [r0, #0]
   d5722:	6085      	str	r5, [r0, #8]
   d5724:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5726:	4906      	ldr	r1, [pc, #24]	; (d5740 <_Z17acquireWireBufferv+0x2c>)
   d5728:	4628      	mov	r0, r5
   d572a:	f000 f83a 	bl	d57a2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d572e:	4904      	ldr	r1, [pc, #16]	; (d5740 <_Z17acquireWireBufferv+0x2c>)
	};
   d5730:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5732:	4628      	mov	r0, r5
   d5734:	f000 f835 	bl	d57a2 <_ZnajRKSt9nothrow_t>
	};
   d5738:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d573a:	4620      	mov	r0, r4
   d573c:	bd38      	pop	{r3, r4, r5, pc}
   d573e:	bf00      	nop
   d5740:	000d5a04 	.word	0x000d5a04

000d5744 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5744:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5746:	4d0f      	ldr	r5, [pc, #60]	; (d5784 <_Z19__fetch_global_Wirev+0x40>)
   d5748:	7829      	ldrb	r1, [r5, #0]
   d574a:	f3bf 8f5b 	dmb	ish
   d574e:	f011 0401 	ands.w	r4, r1, #1
{
   d5752:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5754:	d113      	bne.n	d577e <_Z19__fetch_global_Wirev+0x3a>
   d5756:	4628      	mov	r0, r5
   d5758:	f7fe fc9f 	bl	d409a <__cxa_guard_acquire>
   d575c:	b178      	cbz	r0, d577e <_Z19__fetch_global_Wirev+0x3a>
   d575e:	a801      	add	r0, sp, #4
   d5760:	f7ff ffd8 	bl	d5714 <_Z17acquireWireBufferv>
   d5764:	aa01      	add	r2, sp, #4
   d5766:	4621      	mov	r1, r4
   d5768:	4807      	ldr	r0, [pc, #28]	; (d5788 <_Z19__fetch_global_Wirev+0x44>)
   d576a:	f7ff fb81 	bl	d4e70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d576e:	4628      	mov	r0, r5
   d5770:	f7fe fc98 	bl	d40a4 <__cxa_guard_release>
   d5774:	4a05      	ldr	r2, [pc, #20]	; (d578c <_Z19__fetch_global_Wirev+0x48>)
   d5776:	4906      	ldr	r1, [pc, #24]	; (d5790 <_Z19__fetch_global_Wirev+0x4c>)
   d5778:	4803      	ldr	r0, [pc, #12]	; (d5788 <_Z19__fetch_global_Wirev+0x44>)
   d577a:	f000 f80b 	bl	d5794 <__aeabi_atexit>
	return wire;
}
   d577e:	4802      	ldr	r0, [pc, #8]	; (d5788 <_Z19__fetch_global_Wirev+0x44>)
   d5780:	b007      	add	sp, #28
   d5782:	bd30      	pop	{r4, r5, pc}
   d5784:	2003e7d8 	.word	0x2003e7d8
   d5788:	2003e7dc 	.word	0x2003e7dc
   d578c:	2003e5fc 	.word	0x2003e5fc
   d5790:	000d4e19 	.word	0x000d4e19

000d5794 <__aeabi_atexit>:
   d5794:	460b      	mov	r3, r1
   d5796:	4601      	mov	r1, r0
   d5798:	4618      	mov	r0, r3
   d579a:	f000 b805 	b.w	d57a8 <__cxa_atexit>

000d579e <_ZdlPvj>:
   d579e:	f7fe bc7a 	b.w	d4096 <_ZdlPv>

000d57a2 <_ZnajRKSt9nothrow_t>:
   d57a2:	f7fe bc76 	b.w	d4092 <_Znaj>
	...

000d57a8 <__cxa_atexit>:
   d57a8:	b510      	push	{r4, lr}
   d57aa:	4c05      	ldr	r4, [pc, #20]	; (d57c0 <__cxa_atexit+0x18>)
   d57ac:	4613      	mov	r3, r2
   d57ae:	b12c      	cbz	r4, d57bc <__cxa_atexit+0x14>
   d57b0:	460a      	mov	r2, r1
   d57b2:	4601      	mov	r1, r0
   d57b4:	2002      	movs	r0, #2
   d57b6:	f3af 8000 	nop.w
   d57ba:	bd10      	pop	{r4, pc}
   d57bc:	4620      	mov	r0, r4
   d57be:	e7fc      	b.n	d57ba <__cxa_atexit+0x12>
   d57c0:	00000000 	.word	0x00000000

000d57c4 <memcpy>:
   d57c4:	440a      	add	r2, r1
   d57c6:	4291      	cmp	r1, r2
   d57c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d57cc:	d100      	bne.n	d57d0 <memcpy+0xc>
   d57ce:	4770      	bx	lr
   d57d0:	b510      	push	{r4, lr}
   d57d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d57d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d57da:	4291      	cmp	r1, r2
   d57dc:	d1f9      	bne.n	d57d2 <memcpy+0xe>
   d57de:	bd10      	pop	{r4, pc}

000d57e0 <memset>:
   d57e0:	4402      	add	r2, r0
   d57e2:	4603      	mov	r3, r0
   d57e4:	4293      	cmp	r3, r2
   d57e6:	d100      	bne.n	d57ea <memset+0xa>
   d57e8:	4770      	bx	lr
   d57ea:	f803 1b01 	strb.w	r1, [r3], #1
   d57ee:	e7f9      	b.n	d57e4 <memset+0x4>

000d57f0 <srand>:
   d57f0:	b538      	push	{r3, r4, r5, lr}
   d57f2:	4b0d      	ldr	r3, [pc, #52]	; (d5828 <srand+0x38>)
   d57f4:	681d      	ldr	r5, [r3, #0]
   d57f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d57f8:	4604      	mov	r4, r0
   d57fa:	b97b      	cbnz	r3, d581c <srand+0x2c>
   d57fc:	2018      	movs	r0, #24
   d57fe:	f7ff fa87 	bl	d4d10 <malloc>
   d5802:	4a0a      	ldr	r2, [pc, #40]	; (d582c <srand+0x3c>)
   d5804:	4b0a      	ldr	r3, [pc, #40]	; (d5830 <srand+0x40>)
   d5806:	63a8      	str	r0, [r5, #56]	; 0x38
   d5808:	e9c0 2300 	strd	r2, r3, [r0]
   d580c:	4b09      	ldr	r3, [pc, #36]	; (d5834 <srand+0x44>)
   d580e:	6083      	str	r3, [r0, #8]
   d5810:	230b      	movs	r3, #11
   d5812:	8183      	strh	r3, [r0, #12]
   d5814:	2201      	movs	r2, #1
   d5816:	2300      	movs	r3, #0
   d5818:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d581c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d581e:	2200      	movs	r2, #0
   d5820:	611c      	str	r4, [r3, #16]
   d5822:	615a      	str	r2, [r3, #20]
   d5824:	bd38      	pop	{r3, r4, r5, pc}
   d5826:	bf00      	nop
   d5828:	2003e598 	.word	0x2003e598
   d582c:	abcd330e 	.word	0xabcd330e
   d5830:	e66d1234 	.word	0xe66d1234
   d5834:	0005deec 	.word	0x0005deec

000d5838 <strlen>:
   d5838:	4603      	mov	r3, r0
   d583a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d583e:	2a00      	cmp	r2, #0
   d5840:	d1fb      	bne.n	d583a <strlen+0x2>
   d5842:	1a18      	subs	r0, r3, r0
   d5844:	3801      	subs	r0, #1
   d5846:	4770      	bx	lr

000d5848 <dynalib_user>:
   d5848:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5858:	0000 0000 6143 696c 7262 7461 0a65 4300     ....Calibrate..C
   d5868:	6d61 7265 0a61 7300 696f 5b6c 5d69 3d20     amera..soil[i] =
   d5878:	2520 2069 2069 203d 6925 000a 764f 7265      %i i = %i..Over
   d5888:	000a 0000 c000 4001 1000 4002 2000 4002     .......@...@. .@

000d5898 <CSWTCH.60>:
   d5898:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d58a8:	0050 0000                                   P...

000d58ac <_ZTVN5spark13EthernetClassE>:
	...
   d58b4:	4df9 000d 4def 000d 4de5 000d 4ddb 000d     .M...M...M...M..
   d58c4:	4dcf 000d 4dc3 000d 4db7 000d 4daf 000d     .M...M...M...M..
   d58d4:	4da5 000d 4d9b 000d 4ff1 000d               .M...M...O..

000d58e0 <_ZTV7TwoWire>:
	...
   d58e8:	4e19 000d 4e63 000d 4e3b 000d 4e1b 000d     .N..cN..;N...N..
   d58f8:	4e43 000d 4e4b 000d 4e53 000d 4e5b 000d     CN..KN..SN..[N..

000d5908 <_ZTV9IPAddress>:
	...
   d5910:	4ea5 000d 4e95 000d 4e97 000d 7061 0070     .N...N...N..app.

000d5920 <_ZTVN5spark12NetworkClassE>:
	...
   d5928:	4f89 000d 4f93 000d 4f9d 000d 4fa7 000d     .O...O...O...O..
   d5938:	4fb1 000d 4fbd 000d 4fc9 000d 4fd5 000d     .O...O...O...O..
   d5948:	4fdd 000d 4fe7 000d 4ff1 000d 5925 252d     .O...O...O..%Y-%
   d5958:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d5968:	7361 7463 6d69 0065                         asctime.

000d5970 <_ZTV11USARTSerial>:
	...
   d5978:	5271 000d 52dd 000d 52b5 000d 50d9 000d     qR...R...R...P..
   d5988:	5285 000d 52a1 000d 5293 000d 52af 000d     .R...R...R...R..
   d5998:	5273 000d 5277 000d                         sR..wR..

000d59a0 <_ZTV9USBSerial>:
	...
   d59a8:	5371 000d 53d9 000d 53af 000d 50d9 000d     qS...S...S...P..
   d59b8:	53a1 000d 5373 000d 5383 000d 53d3 000d     .S..sS...S...S..
   d59c8:	5393 000d 536d 000d                         .S..mS..

000d59d0 <_ZTVN5spark9WiFiClassE>:
	...
   d59d8:	54d3 000d 54c9 000d 54bf 000d 5475 000d     .T...T...T..uT..
   d59e8:	54b3 000d 54a7 000d 549b 000d 5493 000d     .T...T...T...T..
   d59f8:	5489 000d 547f 000d 4ff1 000d               .T...T...O..

000d5a04 <_ZSt7nothrow>:
	...

000d5a05 <link_const_variable_data_end>:
   d5a05:	00          	.byte	0x00
	...

000d5a08 <link_constructors_location>:
   d5a08:	000d449d 	.word	0x000d449d
   d5a0c:	000d49b9 	.word	0x000d49b9
   d5a10:	000d4d61 	.word	0x000d4d61
   d5a14:	000d4e05 	.word	0x000d4e05
   d5a18:	000d4f79 	.word	0x000d4f79
   d5a1c:	000d50c5 	.word	0x000d50c5
   d5a20:	000d51f1 	.word	0x000d51f1
   d5a24:	000d5221 	.word	0x000d5221
   d5a28:	000d525d 	.word	0x000d525d
   d5a2c:	000d54dd 	.word	0x000d54dd
